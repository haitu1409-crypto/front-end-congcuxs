/**
 * XSMB API Service
 * Service ƒë·ªÉ g·ªçi API backend l·∫•y d·ªØ li·ªáu k·∫øt qu·∫£ x·ªï s·ªë mi·ªÅn B·∫Øc
 */

import axios from 'axios';

// Base URL c·ªßa backend API
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';

// H√†m t·∫°o userId ng·∫´u nhi√™n (t·ª´ kqxsMB.js)
const getUserId = () => {
    if (typeof window !== 'undefined') {
        let userId = localStorage.getItem('userId');
        if (!userId) {
            userId = Math.random().toString(36).substring(2);
            localStorage.setItem('userId', userId);
        }
        return userId;
    }
    return 'default-user';
};

// T·∫°o axios instance v·ªõi c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
const apiClient = axios.create({
    baseURL: API_BASE_URL,
    timeout: 15000,
    headers: {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache',
    },
});

// Cache ƒë·ªÉ tr√°nh g·ªçi API qu√° nhi·ªÅu
const apiCache = new Map();
const CACHE_DURATION = 5 * 60 * 1000; // 5 ph√∫t

// Th√™m retry logic cho 429 errors v·ªõi exponential backoff
const retryRequest = async (requestFn, maxRetries = 2, delay = 3000) => {
    for (let i = 0; i < maxRetries; i++) {
        try {
            return await requestFn();
        } catch (error) {
            if (error.response?.status === 429 && i < maxRetries - 1) {
                const backoffDelay = delay * Math.pow(2, i); // Exponential backoff
                console.log(`üîÑ Retry ${i + 1}/${maxRetries} after ${backoffDelay}ms...`);
                await new Promise(resolve => setTimeout(resolve, backoffDelay));
                continue;
            }
            throw error;
        }
    }
};

/**
 * Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ backend sang format c·ªßa component
 * @param {Object} backendData - D·ªØ li·ªáu t·ª´ backend
 * @returns {Object} - D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c format cho component
 */
const transformBackendData = (backendData) => {
    if (!backendData) return null;

    console.log('üîç Backend data received:', backendData);

    // Format ng√†y
    const formatDate = (dateString) => {
        if (!dateString) return null;
        const date = new Date(dateString);
        return date.toLocaleDateString('vi-VN', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    };

    // T·∫°o d·ªØ li·ªáu loto t·ª´ c√°c gi·∫£i
    const generateLotoData = (data) => {
        const lotoData = {};

        // L·∫•y t·∫•t c·∫£ c√°c s·ªë t·ª´ c√°c gi·∫£i
        const allNumbers = [
            ...(data.specialPrize || []),
            ...(data.firstPrize || []),
            ...(data.secondPrize || []),
            ...(data.threePrizes || []),
            ...(data.fourPrizes || []),
            ...(data.fivePrizes || []),
            ...(data.sixPrizes || []),
            ...(data.sevenPrizes || [])
        ];

        // Nh√≥m theo s·ªë ƒë·∫ßu (0-9)
        for (let i = 0; i <= 9; i++) {
            const numbers = allNumbers
                .map(num => {
                    if (!num || typeof num !== 'string') return null;
                    const lastTwo = num.slice(-2);
                    return lastTwo;
                })
                .filter(num => num && num.startsWith(i.toString()))
                .filter((num, index, arr) => arr.indexOf(num) === index) // Lo·∫°i b·ªè duplicate
                .sort();

            if (numbers.length > 0) {
                lotoData[i.toString()] = numbers.join(', ');
            }
        }

        return lotoData;
    };

    const transformedData = {
        date: formatDate(backendData.drawDate),
        specialPrize: backendData.specialPrize && backendData.specialPrize[0] ? backendData.specialPrize[0] : null,
        firstPrize: backendData.firstPrize && backendData.firstPrize[0] ? backendData.firstPrize[0] : null,
        secondPrize: backendData.secondPrize || [],
        threePrizes: backendData.threePrizes || [],
        fourPrizes: backendData.fourPrizes || [],
        fivePrizes: backendData.fivePrizes || [],
        sixPrizes: backendData.sixPrizes || [],
        sevenPrizes: backendData.sevenPrizes || [],
        maDB: backendData.maDB || '',
        loto: generateLotoData(backendData),
        dayOfWeek: backendData.dayOfWeek,
        tinh: backendData.tinh,
        tentinh: backendData.tentinh
    };

    console.log('‚úÖ Transformed data:', transformedData);
    return transformedData;
};

/**
 * L·∫•y k·∫øt qu·∫£ XSMB m·ªõi nh·∫•t
 * @returns {Promise<Object>} - D·ªØ li·ªáu k·∫øt qu·∫£ XSMB
 */
export const getLatestXSMBNext = async () => {
    const cacheKey = 'latest-xsmb';
    const cached = apiCache.get(cacheKey);

    // Gi·∫£m th·ªùi gian cache ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
    const SHORT_CACHE_DURATION = 2 * 60 * 1000; // 2 ph√∫t thay v√¨ 5 ph√∫t

    // Ki·ªÉm tra cache
    if (cached && Date.now() - cached.timestamp < SHORT_CACHE_DURATION) {
        console.log('üì¶ Using cached latest XSMB data');
        return cached.data;
    }

    return retryRequest(async () => {
        console.log('üîÑ Fetching latest XSMB data...');

        const response = await apiClient.get('/api/xsmb/results/latest');

        if (response.status === 200 && response.data) {
            console.log('‚úÖ Latest XSMB data fetched successfully');

            // Backend tr·∫£ v·ªÅ { success: true, data: result }
            if (response.data.success && response.data.data) {
                const transformedData = transformBackendData(response.data.data);

                // Cache d·ªØ li·ªáu v·ªõi th·ªùi gian ng·∫Øn h∆°n
                apiCache.set(cacheKey, {
                    data: transformedData,
                    timestamp: Date.now()
                });

                return transformedData;
            } else {
                throw new Error(response.data.message || 'No data received from API');
            }
        } else {
            throw new Error('No data received from API');
        }
    });
};

/**
 * L·∫•y k·∫øt qu·∫£ XSMB theo ng√†y c·ª• th·ªÉ
 * @param {string} date - Ng√†y theo format DD-MM-YYYY
 * @returns {Promise<Object>} - D·ªØ li·ªáu k·∫øt qu·∫£ XSMB
 */
export const getXSMBNextByDate = async (date) => {
    // Validate date format
    if (!date || !/^\d{2}-\d{2}-\d{4}$/.test(date)) {
        throw new Error('Invalid date format. Please use DD-MM-YYYY format.');
    }

    const cacheKey = `xsmb-date-${date}`;
    const cached = apiCache.get(cacheKey);

    // Ki·ªÉm tra cache
    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
        console.log(`üì¶ Using cached XSMB data for ${date}`);
        return cached.data;
    }

    return retryRequest(async () => {
        console.log(`üîÑ Fetching XSMB data for date: ${date}`);

        const response = await apiClient.get(`/api/xsmb/results/date/${date}`);

        if (response.status === 200 && response.data) {
            console.log(`‚úÖ XSMB data for ${date} fetched successfully`);

            // Backend tr·∫£ v·ªÅ { success: true, data: result }
            if (response.data.success && response.data.data) {
                const transformedData = transformBackendData(response.data.data);

                // Cache d·ªØ li·ªáu
                apiCache.set(cacheKey, {
                    data: transformedData,
                    timestamp: Date.now()
                });

                return transformedData;
            } else {
                throw new Error(response.data.message || `No data found for date: ${date}`);
            }
        } else {
            throw new Error(`No data found for date: ${date}`);
        }
    });
};

/**
 * L·∫•y danh s√°ch k·∫øt qu·∫£ XSMB trong kho·∫£ng th·ªùi gian
 * @param {string} startDate - Ng√†y b·∫Øt ƒë·∫ßu (DD-MM-YYYY)
 * @param {string} endDate - Ng√†y k·∫øt th√∫c (DD-MM-YYYY)
 * @param {number} limit - S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ªëi ƒëa (default: 30)
 * @returns {Promise<Array>} - Danh s√°ch d·ªØ li·ªáu k·∫øt qu·∫£ XSMB
 */
export const getXSMBNextRange = async (startDate, endDate, limit = 30) => {
    try {
        // Validate date formats
        if (!startDate || !endDate ||
            !/^\d{2}-\d{2}-\d{4}$/.test(startDate) ||
            !/^\d{2}-\d{2}-\d{4}$/.test(endDate)) {
            throw new Error('Invalid date format. Please use DD-MM-YYYY format.');
        }

        console.log(`üîÑ Fetching XSMB data from ${startDate} to ${endDate}`);

        const response = await apiClient.get('/api/xsmb/results', {
            params: { startDate, endDate, limit }
        });

        if (response.status === 200 && response.data) {
            console.log(`‚úÖ XSMB range data fetched successfully: ${response.data.length} records`);
            return response.data.map(transformBackendData);
        } else {
            throw new Error(`No data found for range ${startDate} to ${endDate}`);
        }
    } catch (error) {
        console.error(`‚ùå Error fetching XSMB range data:`, error);

        if (error.response) {
            if (error.response.status === 404) {
                throw new Error(`Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu t·ª´ ${startDate} ƒë·∫øn ${endDate}`);
            }
            throw new Error(`API Error: ${error.response.status} - ${error.response.data?.error || 'Unknown error'}`);
        } else if (error.request) {
            throw new Error('Network Error: Unable to connect to server');
        } else {
            throw new Error(`Request Error: ${error.message}`);
        }
    }
};

/**
 * L·∫•y k·∫øt qu·∫£ XSMB theo th·ª© trong tu·∫ßn
 * @param {string} dayOfWeek - Th·ª© trong tu·∫ßn (thu-2, thu-3, ..., chu-nhat)
 * @returns {Promise<Array>} - Danh s√°ch d·ªØ li·ªáu k·∫øt qu·∫£ XSMB
 */
export const getXSMBNextByDayOfWeek = async (dayOfWeek) => {
    try {
        if (!dayOfWeek) {
            throw new Error('Day of week is required');
        }

        console.log(`üîÑ Fetching XSMB data for day: ${dayOfWeek}`);

        const response = await apiClient.get(`/api/xsmb/${dayOfWeek}`);

        if (response.status === 200 && response.data) {
            console.log(`‚úÖ XSMB data for ${dayOfWeek} fetched successfully: ${response.data.length} records`);
            return response.data.map(transformBackendData);
        } else {
            throw new Error(`No data found for day: ${dayOfWeek}`);
        }
    } catch (error) {
        console.error(`‚ùå Error fetching XSMB data for ${dayOfWeek}:`, error);

        if (error.response) {
            if (error.response.status === 404) {
                throw new Error(`Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho ${dayOfWeek}`);
            }
            throw new Error(`API Error: ${error.response.status} - ${error.response.data?.error || 'Unknown error'}`);
        } else if (error.request) {
            throw new Error('Network Error: Unable to connect to server');
        } else {
            throw new Error(`Request Error: ${error.message}`);
        }
    }
};

/**
 * L·∫•y t·∫•t c·∫£ k·∫øt qu·∫£ XSMB (c√≥ ph√¢n trang)
 * @param {number} limit - S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ªëi ƒëa (default: 30)
 * @param {number} page - Trang (default: 1)
 * @returns {Promise<Array>} - Danh s√°ch d·ªØ li·ªáu k·∫øt qu·∫£ XSMB
 */
export const getAllXSMBNext = async (limit = 30, page = 1) => {
    try {
        console.log(`üîÑ Fetching all XSMB data - page ${page}, limit ${limit}`);

        const response = await apiClient.get('/api/xsmb/results', {
            params: { limit, page }
        });

        if (response.status === 200 && response.data) {
            console.log(`‚úÖ All XSMB data fetched successfully: ${response.data.length} records`);
            return response.data.map(transformBackendData);
        } else {
            throw new Error('No data received from API');
        }
    } catch (error) {
        console.error('‚ùå Error fetching all XSMB data:', error);

        if (error.response) {
            throw new Error(`API Error: ${error.response.status} - ${error.response.data?.error || 'Unknown error'}`);
        } else if (error.request) {
            throw new Error('Network Error: Unable to connect to server');
        } else {
            throw new Error(`Request Error: ${error.message}`);
        }
    }
};

/**
 * Utility function ƒë·ªÉ format ng√†y hi·ªán t·∫°i theo format DD-MM-YYYY
 * @returns {string} - Ng√†y hi·ªán t·∫°i theo format DD-MM-YYYY
 */
export const getCurrentDateFormatted = () => {
    const now = new Date();
    const day = now.getDate().toString().padStart(2, '0');
    const month = (now.getMonth() + 1).toString().padStart(2, '0');
    const year = now.getFullYear();
    return `${day}-${month}-${year}`;
};

/**
 * Utility function ƒë·ªÉ format ng√†y theo format DD-MM-YYYY
 * @param {Date} date - Ng√†y c·∫ßn format
 * @returns {string} - Ng√†y theo format DD-MM-YYYY
 */
export const formatDateToDDMMYYYY = (date) => {
    if (!date) return null;
    const d = new Date(date);
    const day = d.getDate().toString().padStart(2, '0');
    const month = (d.getMonth() + 1).toString().padStart(2, '0');
    const year = d.getFullYear();
    return `${day}-${month}-${year}`;
};

/**
 * Utility function ƒë·ªÉ parse ng√†y t·ª´ format DD-MM-YYYY
 * @param {string} dateString - Ng√†y theo format DD-MM-YYYY
 * @returns {Date} - Date object
 */
export const parseDateFromDDMMYYYY = (dateString) => {
    if (!dateString || !/^\d{2}-\d{2}-\d{4}$/.test(dateString)) {
        throw new Error('Invalid date format. Please use DD-MM-YYYY format.');
    }
    const [day, month, year] = dateString.split('-').map(Number);
    return new Date(year, month - 1, day);
};

/**
 * Clear cache ƒë·ªÉ force refresh d·ªØ li·ªáu
 */
export const clearCache = () => {
    apiCache.clear();
    console.log('üóëÔ∏è API cache cleared');
};

/**
 * Clear cache cho d·ªØ li·ªáu m·ªõi nh·∫•t
 */
export const clearLatestCache = () => {
    apiCache.delete('latest-xsmb');
    console.log('üóëÔ∏è Latest XSMB cache cleared');
};

// Export default object v·ªõi t·∫•t c·∫£ functions
export default {
    getLatestXSMBNext,
    getXSMBNextByDate,
    getXSMBNextRange,
    getXSMBNextByDayOfWeek,
    getAllXSMBNext,
    getCurrentDateFormatted,
    formatDateToDDMMYYYY,
    parseDateFromDDMMYYYY,
    transformBackendData,
    clearCache,
    clearLatestCache
};
