#!/usr/bin/env node

/**
 * Image Optimization Script
 * T·ªëi ∆∞u h√≥a v√† t·∫°o c√°c k√≠ch th∆∞·ªõc icon kh√°c nhau
 */

const fs = require('fs');
const path = require('path');

console.log('üñºÔ∏è T·ªëi ∆∞u h√≥a images v√† icons...\n');

// Ki·ªÉm tra c√°c file icon c·∫ßn thi·∫øt
const publicDir = path.join(__dirname, '../public');
const requiredIcons = [
    'favicon.ico',
    'icon-192.png',
    'icon-512.png'
];

const missingIcons = [];
requiredIcons.forEach(icon => {
    const iconPath = path.join(publicDir, icon);
    if (!fs.existsSync(iconPath)) {
        missingIcons.push(icon);
    } else {
        const stats = fs.statSync(iconPath);
        console.log(`‚úÖ ${icon}: ${(stats.size / 1024).toFixed(2)} KB`);
    }
});

if (missingIcons.length > 0) {
    console.log('\n‚ùå Missing icons:');
    missingIcons.forEach(icon => console.log(`  - ${icon}`));
} else {
    console.log('\n‚úÖ T·∫•t c·∫£ icons ƒë√£ c√≥ s·∫µn!');
}

// Ki·ªÉm tra manifest.json
const manifestPath = path.join(publicDir, 'manifest.json');
if (fs.existsSync(manifestPath)) {
    try {
        const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
        console.log('\nüì± PWA Manifest:');
        console.log(`  Name: ${manifest.name}`);
        console.log(`  Short Name: ${manifest.short_name}`);
        console.log(`  Icons: ${manifest.icons.length} defined`);
        
        // Ki·ªÉm tra t·∫•t c·∫£ icons trong manifest c√≥ t·ªìn t·∫°i kh√¥ng
        let allIconsExist = true;
        manifest.icons.forEach(icon => {
            const iconPath = path.join(publicDir, icon.src.replace('/', ''));
            if (!fs.existsSync(iconPath)) {
                console.log(`  ‚ùå Missing: ${icon.src}`);
                allIconsExist = false;
            }
        });
        
        if (allIconsExist) {
            console.log('  ‚úÖ T·∫•t c·∫£ icons trong manifest ƒë·ªÅu t·ªìn t·∫°i');
        }
    } catch (error) {
        console.log('‚ùå L·ªói khi ƒë·ªçc manifest.json:', error.message);
    }
} else {
    console.log('‚ùå Kh√¥ng t√¨m th·∫•y manifest.json');
}

// Ki·ªÉm tra th∆∞ m·ª•c imgs
const imgsDir = path.join(publicDir, 'imgs');
if (fs.existsSync(imgsDir)) {
    const images = fs.readdirSync(imgsDir);
    console.log('\nüñºÔ∏è Images trong th∆∞ m·ª•c imgs:');
    images.forEach(img => {
        const imgPath = path.join(imgsDir, img);
        const stats = fs.statSync(imgPath);
        console.log(`  ${img}: ${(stats.size / 1024).toFixed(2)} KB`);
    });
} else {
    console.log('\n‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c imgs');
}

// Recommendations
console.log('\nüí° Khuy·∫øn ngh·ªã t·ªëi ∆∞u h√≥a:');
console.log('  1. S·ª≠ d·ª•ng WebP format cho images hi·ªán ƒë·∫°i');
console.log('  2. T·∫°o multiple sizes cho responsive images');
console.log('  3. Compress images ƒë·ªÉ gi·∫£m file size');
console.log('  4. S·ª≠ d·ª•ng next/image component cho lazy loading');

console.log('\nüéâ Ki·ªÉm tra images ho√†n t·∫•t!');
