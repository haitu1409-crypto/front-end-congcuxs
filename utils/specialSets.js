/**
 * Bộ số đặc biệt - Tối ưu hiệu suất
 * Định nghĩa 100 bộ số từ 00-99
 */

// Tạo Map để lookup O(1) thay vì Array O(n)
const SPECIAL_SETS = new Map();

// Định nghĩa các bộ số đặc biệt
const specialSetsData = {
    '00': ['00', '05', '50', '55'],
    '01': ['01', '10', '06', '60', '51', '15', '56', '65'],
    '02': ['02', '20', '07', '70', '52', '25', '57', '75'],
    '03': ['03', '30', '08', '80', '53', '35', '58', '85'],
    '04': ['04', '40', '09', '90', '54', '45', '59', '95'],
    '05': ['05', '50', '00', '55'],
    '06': ['06', '60', '01', '10', '56', '65', '51', '15'],
    '07': ['07', '70', '02', '20', '57', '75', '52', '25'],
    '08': ['08', '80', '03', '30', '58', '85', '53', '35'],
    '09': ['09', '90', '04', '40', '59', '95', '54', '45'],
    '10': ['10', '01', '15', '51', '60', '06', '65', '56'],
    '11': ['11', '16', '61', '66'],
    '12': ['12', '21', '17', '71', '62', '26', '67', '76'],
    '13': ['13', '31', '18', '81', '63', '36', '68', '86'],
    '14': ['14', '41', '19', '91', '64', '46', '69', '96'],
    '15': ['15', '51', '10', '01', '65', '56', '60', '06'],
    '16': ['16', '61', '11', '66'],
    '17': ['17', '71', '12', '21', '67', '76', '62', '26'],
    '18': ['18', '81', '13', '31', '68', '86', '63', '36'],
    '19': ['19', '91', '14', '41', '69', '96', '64', '46'],
    '20': ['20', '02', '25', '52', '70', '07', '75', '57'],
    '21': ['21', '12', '26', '62', '71', '17', '76', '67'],
    '22': ['22', '27', '72', '77'],
    '23': ['23', '32', '28', '82', '73', '37', '78', '87'],
    '24': ['24', '42', '29', '92', '74', '47', '79', '97'],
    '25': ['25', '52', '20', '02', '75', '57', '70', '07'],
    '26': ['26', '62', '21', '12', '76', '67', '71', '17'],
    '27': ['27', '72', '22', '77'],
    '28': ['28', '82', '23', '32', '78', '87', '73', '37'],
    '29': ['29', '92', '24', '42', '79', '97', '74', '47'],
    '30': ['30', '03', '35', '53', '80', '08', '85', '58'],
    '31': ['31', '13', '36', '63', '81', '18', '86', '68'],
    '32': ['32', '23', '37', '73', '82', '28', '87', '78'],
    '33': ['33', '38', '83', '88'],
    '34': ['34', '43', '39', '93', '84', '48', '89', '98'],
    '35': ['35', '53', '30', '03', '85', '58', '80', '08'],
    '36': ['36', '63', '31', '13', '86', '68', '81', '18'],
    '37': ['37', '73', '32', '23', '87', '78', '82', '28'],
    '38': ['38', '83', '33', '88'],
    '39': ['39', '93', '34', '43', '89', '98', '84', '48'],
    '40': ['40', '04', '45', '54', '90', '09', '95', '59'],
    '41': ['41', '14', '46', '64', '91', '19', '96', '69'],
    '42': ['42', '24', '47', '74', '92', '29', '97', '79'],
    '43': ['43', '34', '48', '84', '93', '39', '98', '89'],
    '44': ['44', '49', '94', '99'],
    '45': ['45', '54', '40', '04', '95', '59', '90', '09'],
    '46': ['46', '64', '41', '14', '96', '69', '91', '19'],
    '47': ['47', '74', '42', '24', '97', '79', '92', '29'],
    '48': ['48', '84', '43', '34', '98', '89', '93', '39'],
    '49': ['49', '94', '44', '99'],
    '50': ['50', '05', '55', '00'],
    '51': ['51', '15', '56', '65', '01', '10', '06', '60'],
    '52': ['52', '25', '57', '75', '02', '20', '07', '70'],
    '53': ['53', '35', '58', '85', '03', '30', '08', '80'],
    '54': ['54', '45', '59', '95', '04', '40', '09', '90'],
    '55': ['55', '50', '05', '00'],
    '56': ['56', '65', '51', '15', '06', '60', '01', '10'],
    '57': ['57', '75', '52', '25', '07', '70', '02', '20'],
    '58': ['58', '85', '53', '35', '08', '80', '03', '30'],
    '59': ['59', '95', '54', '45', '09', '90', '04', '40'],
    '60': ['60', '06', '65', '56', '10', '01', '15', '51'],
    '61': ['61', '16', '66', '11'],
    '62': ['62', '26', '67', '76', '12', '21', '17', '71'],
    '63': ['63', '36', '68', '86', '13', '31', '18', '81'],
    '64': ['64', '46', '69', '96', '14', '41', '19', '91'],
    '65': ['65', '56', '60', '06', '15', '51', '10', '01'],
    '66': ['66', '61', '16', '11'],
    '67': ['67', '76', '62', '26', '17', '71', '12', '21'],
    '68': ['68', '86', '63', '36', '18', '81', '13', '31'],
    '69': ['69', '96', '64', '46', '19', '91', '14', '41'],
    '70': ['70', '07', '75', '57', '20', '02', '25', '52'],
    '71': ['71', '17', '76', '67', '21', '12', '26', '62'],
    '72': ['72', '27', '77', '22'],
    '73': ['73', '37', '78', '87', '23', '32', '28', '82'],
    '74': ['74', '47', '79', '97', '24', '42', '29', '92'],
    '75': ['75', '57', '70', '07', '25', '52', '20', '02'],
    '76': ['76', '67', '71', '17', '26', '62', '21', '12'],
    '77': ['77', '72', '27', '22'],
    '78': ['78', '87', '73', '37', '28', '82', '23', '32'],
    '79': ['79', '97', '74', '47', '29', '92', '24', '42'],
    '80': ['80', '08', '85', '58', '30', '03', '35', '53'],
    '81': ['81', '18', '86', '68', '31', '13', '36', '63'],
    '82': ['82', '28', '87', '78', '32', '23', '37', '73'],
    '83': ['83', '38', '88', '33'],
    '84': ['84', '48', '89', '98', '34', '43', '39', '93'],
    '85': ['85', '58', '80', '08', '35', '53', '30', '03'],
    '86': ['86', '68', '81', '18', '36', '63', '31', '13'],
    '87': ['87', '78', '82', '28', '37', '73', '32', '23'],
    '88': ['88', '83', '38', '33'],
    '89': ['89', '98', '84', '48', '39', '93', '34', '43'],
    '90': ['90', '09', '95', '59', '40', '04', '45', '54'],
    '91': ['91', '19', '96', '69', '41', '14', '46', '64'],
    '92': ['92', '29', '97', '79', '42', '24', '47', '74'],
    '93': ['93', '39', '98', '89', '43', '34', '48', '84'],
    '94': ['94', '49', '99', '44'],
    '95': ['95', '59', '90', '09', '45', '54', '40', '04'],
    '96': ['96', '69', '91', '19', '46', '64', '41', '14'],
    '97': ['97', '79', '92', '29', '47', '74', '42', '24'],
    '98': ['98', '89', '93', '39', '48', '84', '43', '34'],
    '99': ['99', '94', '49', '44']
};

// Khởi tạo Map từ dữ liệu
Object.entries(specialSetsData).forEach(([key, value]) => {
    SPECIAL_SETS.set(key, value);
});

/**
 * Lấy số từ một bộ đặc biệt
 * @param {string} setId - ID của bộ (00-99)
 * @returns {string[]} Mảng các số trong bộ
 */
export const getSpecialSetNumbers = (setId) => {
    return SPECIAL_SETS.get(setId) || [];
};

/**
 * Lấy tất cả số từ nhiều bộ đặc biệt (loại bỏ trùng lặp)
 * @param {string[]} setIds - Mảng ID các bộ
 * @returns {string[]} Mảng các số unique từ tất cả bộ
 */
export const getCombinedSpecialSetNumbers = (setIds) => {
    if (!setIds || setIds.length === 0) return [];

    const allNumbers = new Set();

    setIds.forEach(setId => {
        const numbers = getSpecialSetNumbers(setId);
        numbers.forEach(num => allNumbers.add(num));
    });

    return Array.from(allNumbers).sort((a, b) => parseInt(a) - parseInt(b));
};

/**
 * Lấy danh sách tất cả bộ số đặc biệt
 * @returns {Array} Mảng objects chứa {id, numbers, count} được sắp xếp từ 00-99
 */
export const getAllSpecialSets = () => {
    return Array.from(SPECIAL_SETS.entries())
        .sort(([a], [b]) => parseInt(a) - parseInt(b)) // Sắp xếp theo ID từ 00-99
        .map(([id, numbers]) => ({
            id,
            numbers,
            count: numbers.length
        }));
};

/**
 * Kiểm tra một số có thuộc bộ đặc biệt nào không
 * @param {string} number - Số cần kiểm tra (00-99)
 * @returns {string[]} Mảng ID các bộ chứa số đó
 */
export const findSetsContainingNumber = (number) => {
    const containingSets = [];

    SPECIAL_SETS.forEach((numbers, setId) => {
        if (numbers.includes(number)) {
            containingSets.push(setId);
        }
    });

    return containingSets;
};

/**
 * Lấy thông tin bộ số đặc biệt
 * @param {string} setId - ID của bộ
 * @returns {object|null} Thông tin bộ số
 */
export const getSpecialSetInfo = (setId) => {
    const numbers = SPECIAL_SETS.get(setId);
    if (!numbers) return null;

    return {
        id: setId,
        numbers,
        count: numbers.length
    };
};

export default {
    getSpecialSetNumbers,
    getCombinedSpecialSetNumbers,
    getAllSpecialSets,
    findSetsContainingNumber,
    getSpecialSetInfo
};
