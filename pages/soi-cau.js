import React, { useState, useCallback, useEffect, useMemo } from 'react';
import Head from 'next/head';
import Layout from '../components/Layout';
import apiService from '../services/apiService';
import styles from '../styles/soi-cau.module.css';
import { getPageSEO, generateFAQSchema } from '../config/seoConfig';
import EnhancedSEOHead from '../components/EnhancedSEOHead';

// Cache ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu ƒë√£ t·∫£i
const dataCache = new Map();
const CACHE_DURATION = 5 * 60 * 1000; // 5 ph√∫t

// Skeleton Loading Components
const SkeletonRow = () => (
    <tr>
        <td className="py-2 px-4"><div className={styles.skeleton}></div></td>
        <td className="py-2 px-4"><div className={styles.skeleton}></div></td>
        <td className="py-2 px-4"><div className={styles.skeleton}></div></td>
    </tr>
);

const SkeletonTable = () => (
    <div className={styles.tableWrapper}>
        <table className={styles.tableSoiCau}>
            <thead>
                <tr>
                    <th>Ph∆∞∆°ng ph√°p</th>
                    <th>K·∫øt qu·∫£ d·ª± ƒëo√°n</th>
                    <th>G·ª£i √Ω nu√¥i khung</th>
                </tr>
            </thead>
            <tbody>
                {Array(5).fill().map((_, index) => <SkeletonRow key={index} />)}
            </tbody>
        </table>
    </div>
);

const SoiCauPage = ({ initialSoiCauData, initialDate, initialHistory, initialBachThuDeData }) => {
    const [soiCauResults, setSoiCauResults] = useState(initialSoiCauData.predictions || []);
    const [combinedPrediction, setCombinedPrediction] = useState(initialSoiCauData.combinedPrediction || '');
    const [additionalSuggestions, setAdditionalSuggestions] = useState(initialSoiCauData.additionalSuggestions || []);
    const [bachThuDeResults, setBachThuDeResults] = useState(initialBachThuDeData.predictions || []);
    const [bachThuDeCombined, setBachThuDeCombined] = useState(initialBachThuDeData.combinedPrediction || '');
    const [bachThuDeHistory, setBachThuDeHistory] = useState(initialBachThuDeData.history || []);
    const [selectedDays] = useState(14);
    const [loadingSoiCau, setLoadingSoiCau] = useState(false);
    const [error, setError] = useState(null);
    const [metadata, setMetadata] = useState(initialSoiCauData.metadata || {});
    const [history, setHistory] = useState(initialHistory || []);

    // ƒê√£ lo·∫°i b·ªè logic preload cho ng√†y mai

    const fetchSoiCauData = useCallback(async (date, days) => {
        const cacheKey = `soicau-${date}-${days}`;
        const cachedData = dataCache.get(cacheKey);

        // Ki·ªÉm tra cache tr∆∞·ªõc
        if (cachedData && (Date.now() - cachedData.timestamp) < CACHE_DURATION) {
            console.log(`üì¶ Using cached data for ${date}`);
            setSoiCauResults(cachedData.soiCau.predictions || []);
            setCombinedPrediction(cachedData.soiCau.combinedPrediction || '');
            setAdditionalSuggestions(cachedData.soiCau.additionalSuggestions || []);
            setMetadata(cachedData.soiCau.metadata || {});
            setHistory(cachedData.historyLo || []);
            setBachThuDeResults(cachedData.bachThuDe.predictions || []);
            setBachThuDeCombined(cachedData.bachThuDe.combinedPrediction || '');
            setBachThuDeHistory(cachedData.bachThuDe.history || []);
            return;
        }

        setLoadingSoiCau(true);
        setError(null);
        try {
            console.log(`üîÑ Fetching fresh data for ${date} (optimized)`);
            // Fetch c·∫£ soi c·∫ßu, b·∫°ch th·ªß ƒë·ªÅ v√† l·ªãch s·ª≠ b·∫°ch th·ªß l√¥ song song
            console.log('üìÖ Fetching data for date:', date, 'days:', days);
            const [soiCauResponse, bachThuDeResponse, historyLoResponse] = await Promise.all([
                apiService.getSoiCauBachThu({ date, days }),
                apiService.getBachThuDe({ date, days }),
                apiService.getHistoryLo({ limit: 14, days: 14 })
            ]);

            // Set soi c·∫ßu data
            setSoiCauResults(soiCauResponse.predictions || []);
            setCombinedPrediction(soiCauResponse.combinedPrediction || '');
            setAdditionalSuggestions(soiCauResponse.additionalSuggestions || []);

            // Set l·ªãch s·ª≠ b·∫°ch th·ªß l√¥ t·ª´ database th·ª±c t·∫ø
            if (historyLoResponse?.success && historyLoResponse?.data?.history) {
                setHistory(historyLoResponse.data.history);
                console.log('‚úÖ Bach thu lo history loaded from database:', historyLoResponse.data.history.length, 'records');
            } else {
                console.warn('‚ö†Ô∏è No bach thu lo history data');
                setHistory([]);
            }

            // Set b·∫°ch th·ªß ƒë·ªÅ data
            console.log('üîç Bach thu de response:', bachThuDeResponse);
            if (bachThuDeResponse?.success && bachThuDeResponse?.data) {
                setBachThuDeResults(bachThuDeResponse.data.predictions || []);
                setBachThuDeCombined(bachThuDeResponse.data.combinedPrediction || '');
                setBachThuDeHistory(bachThuDeResponse.data.history || []);
                console.log('‚úÖ Bach thu de data set:', bachThuDeResponse.data.predictions?.length || 0, 'predictions');

                // Merge metadata t·ª´ c·∫£ hai API
                const mergedMetadata = {
                    ...soiCauResponse.metadata,
                    ...bachThuDeResponse.data.metadata,
                    // ∆Øu ti√™n metadata t·ª´ soi c·∫ßu cho c√°c tr∆∞·ªùng chung
                    predictionFor: soiCauResponse.metadata?.predictionFor || bachThuDeResponse.data.metadata?.predictionFor,
                    dataFrom: soiCauResponse.metadata?.dataFrom || bachThuDeResponse.data.metadata?.dataFrom,
                    dataTo: soiCauResponse.metadata?.dataTo || bachThuDeResponse.data.metadata?.dataTo,
                    dataPoints: soiCauResponse.metadata?.dataPoints || bachThuDeResponse.data.metadata?.dataPoints,
                    specialPrize: soiCauResponse.metadata?.specialPrize || bachThuDeResponse.data.metadata?.specialPrize,
                    firstPrize: soiCauResponse.metadata?.firstPrize || bachThuDeResponse.data.metadata?.firstPrize
                };
                setMetadata(mergedMetadata);
            } else {
                console.warn('‚ö†Ô∏è Bach thu de response invalid:', bachThuDeResponse);
                setBachThuDeResults([]);
                setBachThuDeCombined('');
                setBachThuDeHistory([]);
                setMetadata(soiCauResponse.metadata || {});
            }

            if (soiCauResponse.metadata?.message) {
                setError(soiCauResponse.metadata.message);
            }

            // L∆∞u v√†o cache
            const cacheData = {
                soiCau: soiCauResponse,
                bachThuDe: bachThuDeResponse?.data || {},
                historyLo: historyLoResponse?.data?.history || [],
                timestamp: Date.now()
            };
            dataCache.set(cacheKey, cacheData);
            console.log(`üíæ Data cached for ${date} (optimized)`);
        } catch (err) {
            const errorMessage = err.message.includes('429')
                ? 'Qu√° nhi·ªÅu y√™u c·∫ßu, vui l√≤ng ch·ªù 5 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i.'
                : err.message.includes('D·ªØ li·ªáu x·ªï s·ªë kh√¥ng h·ª£p l·ªá')
                    ? `D·ªØ li·ªáu x·ªï s·ªë kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn ng√†y kh√°c ho·∫∑c th·ª≠ l·∫°i sau.`
                    : err.message || 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu soi c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ch·ªçn ng√†y kh√°c.';
            setError(errorMessage);
            setSoiCauResults([]);
            setCombinedPrediction('');
            setAdditionalSuggestions([]);
            setBachThuDeResults([]);
            setBachThuDeCombined('');
            setBachThuDeHistory([]);
            setMetadata({});
            setHistory([]);
        } finally {
            setLoadingSoiCau(false);
        }
    }, []);

    useEffect(() => {
        // T·ª± ƒë·ªông s·ª≠ d·ª•ng ng√†y hi·ªán t·∫°i v·ªõi 14 ng√†y d·ªØ li·ªáu
        const today = new Date();
        const dateString = `${today.getDate().toString().padStart(2, '0')}/${(today.getMonth() + 1).toString().padStart(2, '0')}/${today.getFullYear()}`;
        fetchSoiCauData(dateString, 14); // S·ª≠ d·ª•ng 14 ng√†y c·ªë ƒë·ªãnh
    }, [fetchSoiCauData]);


    useEffect(() => {
        const handleScroll = () => {
            const btn = document.querySelector(`.${styles.scrollToTopBtn}`);
            if (btn) {
                btn.style.display = window.scrollY > 300 ? 'block' : 'none';
            }
        };
        window.addEventListener('scroll', handleScroll);
        return () => window.removeEventListener('scroll', handleScroll);
    }, []);

    // SEO Configuration v·ªõi keywords m·ªü r·ªông
    const seoConfig = getPageSEO('soiCauBayesian');
    const currentDate = metadata.predictionFor || new Date().toLocaleDateString('vi-VN');
    
    // Meta title (cho SEO, c√≥ th·ªÉ d√†i h∆°n)
    const pageTitle = `Soi C·∫ßu Mi·ªÅn B·∫Øc H√¥m Nay ${currentDate} | D·ª± ƒêo√°n XSMB Ch√≠nh X√°c 100% - T·ªët H∆°n XSKT, Xosothantai 2025`;
    
    // H1 title (ng·∫Øn g·ªçn, user-friendly)
    const h1Title = `Soi C·∫ßu Mi·ªÅn B·∫Øc H√¥m Nay ${currentDate} - D·ª± ƒêo√°n XSMB Ch√≠nh X√°c 100%`;
    
    const pageDescription = `Soi c·∫ßu mi·ªÅn b·∫Øc h√¥m nay ${currentDate} (soi cau mien bac hom nay) ch√≠nh x√°c 100%. D·ª± ƒëo√°n XSMB, soi c·∫ßu MB b·∫±ng 5 ph∆∞∆°ng ph√°p truy·ªÅn th·ªëng: Pascal, H√¨nh Qu·∫£ Tr√°m, T·∫ßn Su·∫•t L√¥ C·∫∑p, L√¥ Gan K·∫øt H·ª£p, L√¥ R∆°i. D·ªØ li·ªáu t·ª´ ${metadata.dataFrom || ''} ƒë·∫øn ${metadata.dataTo || ''}. Mi·ªÖn ph√≠ 100%!`;

    // FIX: T√≠nh structured data m·ªôt l·∫ßn v√† deterministic ƒë·ªÉ tr√°nh hydration error
    // S·ª≠ d·ª•ng useMemo ƒë·ªÉ ƒë·∫£m b·∫£o structured data kh√¥ng thay ƒë·ªïi gi·ªØa renders
    const structuredData = useMemo(() => {
        // Normalize date ƒë·ªÉ deterministic (set v·ªÅ 00:00:00)
        const normalizedDate = new Date();
        normalizedDate.setHours(0, 0, 0, 0);
        const deterministicDate = normalizedDate.toISOString();
        
        const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://taodandewukong.pro';
        
        // FAQ Schema cho SEO
        const faqData = [
            {
                question: 'Soi c·∫ßu mi·ªÅn b·∫Øc h√¥m nay ch√≠nh x√°c nh∆∞ th·∫ø n√†o?',
                answer: `Soi c·∫ßu mi·ªÅn b·∫Øc h√¥m nay ${currentDate} s·ª≠ d·ª•ng 5 ph∆∞∆°ng ph√°p truy·ªÅn th·ªëng ƒë√£ ƒë∆∞·ª£c ki·ªÉm ch·ª©ng: Pascal, H√¨nh Qu·∫£ Tr√°m, T·∫ßn Su·∫•t L√¥ C·∫∑p, L√¥ Gan K·∫øt H·ª£p, L√¥ R∆°i. K·∫øt qu·∫£ ƒë∆∞·ª£c t√≠nh to√°n d·ª±a tr√™n d·ªØ li·ªáu x·ªï s·ªë t·ª´ ${metadata.dataFrom || ''} ƒë·∫øn ${metadata.dataTo || ''}.`
            },
            {
                question: 'Soi c·∫ßu mi·ªÅn b·∫Øc c√≥ mi·ªÖn ph√≠ kh√¥ng?',
                answer: 'C√≥, soi c·∫ßu mi·ªÅn b·∫Øc t·∫°i taodandewukong.pro ho√†n to√†n mi·ªÖn ph√≠ 100%. Kh√¥ng c·∫ßn ƒëƒÉng k√Ω, kh√¥ng c·∫ßn thanh to√°n, truy c·∫≠p v√† s·ª≠ d·ª•ng ngay.'
            },
            {
                question: 'C√≥ th·ªÉ soi c·∫ßu XSMB ng√†y mai kh√¥ng?',
                answer: 'C√≥, b·∫°n c√≥ th·ªÉ ch·ªçn ng√†y b·∫•t k·ª≥ ƒë·ªÉ soi c·∫ßu XSMB. H·ªá th·ªëng s·∫Ω t√≠nh to√°n d·ª±a tr√™n d·ªØ li·ªáu l·ªãch s·ª≠ c√≥ s·∫µn.'
            },
            {
                question: 'Soi c·∫ßu mi·ªÅn b·∫Øc c√≥ kh√°c v·ªõi d·ª± ƒëo√°n XSMB kh√¥ng?',
                answer: 'Soi c·∫ßu mi·ªÅn b·∫Øc v√† d·ª± ƒëo√°n XSMB l√† c√πng m·ªôt kh√°i ni·ªám. T·∫°i ƒë√¢y ch√∫ng t√¥i s·ª≠ d·ª•ng thu·∫≠t ng·ªØ "soi c·∫ßu" ƒë·ªÉ ch·ªâ vi·ªác ph√¢n t√≠ch v√† d·ª± ƒëo√°n k·∫øt qu·∫£ x·ªï s·ªë mi·ªÅn B·∫Øc.'
            },
            {
                question: 'Soi c·∫ßu MB t·ªët h∆°n ƒë·ªëi th·ªß nh∆∞ th·∫ø n√†o?',
                answer: 'Soi c·∫ßu mi·ªÅn b·∫Øc t·∫°i taodandewukong.pro s·ª≠ d·ª•ng 5 ph∆∞∆°ng ph√°p truy·ªÅn th·ªëng k·∫øt h·ª£p, c√≥ l·ªãch s·ª≠ d·ª± ƒëo√°n minh b·∫°ch, c·∫≠p nh·∫≠t realtime, v√† ho√†n to√†n mi·ªÖn ph√≠. So s√°nh v·ªõi xskt, xosothantai, atrungroi, xsmn247 - ch√∫ng t√¥i c√≥ nhi·ªÅu ph∆∞∆°ng ph√°p h∆°n v√† t√≠nh nƒÉng t·ªët h∆°n.'
            }
        ];
        
        return [
            {
                '@context': 'https://schema.org',
                '@type': 'Article',
                'headline': pageTitle,
                'description': pageDescription,
                'datePublished': deterministicDate, // FIX: Deterministic date
                'dateModified': deterministicDate, // FIX: Deterministic date
                'author': {
                    '@type': 'Organization',
                    'name': 'D√†n ƒê·ªÅ Wukong'
                },
                'publisher': {
                    '@type': 'Organization',
                    'name': 'D√†n ƒê·ªÅ Wukong',
                    'logo': {
                        '@type': 'ImageObject',
                        'url': `${siteUrl}/imgs/wukong.png`
                    }
                },
                'mainEntityOfPage': {
                    '@type': 'WebPage',
                    '@id': `${siteUrl}/soi-cau`
                },
                'keywords': seoConfig.keywords.slice(0, 50).join(', ')
            },
            generateFAQSchema(faqData),
            {
                '@context': 'https://schema.org',
                '@type': 'SoftwareApplication',
                'name': 'Soi C·∫ßu Mi·ªÅn B·∫Øc Wukong',
                'description': 'C√¥ng c·ª• soi c·∫ßu mi·ªÅn b·∫Øc ch√≠nh x√°c 100% v·ªõi 5 ph∆∞∆°ng ph√°p truy·ªÅn th·ªëng',
                'url': `${siteUrl}/soi-cau`,
                'applicationCategory': 'UtilityApplication',
                'operatingSystem': 'Web Browser',
                'offers': {
                    '@type': 'Offer',
                    'price': '0',
                    'priceCurrency': 'VND'
                },
                'aggregateRating': {
                    '@type': 'AggregateRating',
                    'ratingValue': '4.9',
                    'ratingCount': '5000'
                },
                'featureList': [
                    'Soi c·∫ßu Pascal',
                    'Soi c·∫ßu H√¨nh Qu·∫£ Tr√°m',
                    'Soi c·∫ßu T·∫ßn Su·∫•t L√¥ C·∫∑p',
                    'Soi c·∫ßu L√¥ Gan K·∫øt H·ª£p',
                    'Soi c·∫ßu L√¥ R∆°i',
                    'L·ªãch s·ª≠ d·ª± ƒëo√°n minh b·∫°ch',
                    'C·∫≠p nh·∫≠t realtime',
                    'Mi·ªÖn ph√≠ 100%'
                ]
            }
        ];
    }, [currentDate, pageTitle, pageDescription, seoConfig.keywords, metadata.dataFrom, metadata.dataTo]);

    return (
        <Layout>
            <EnhancedSEOHead
                title={pageTitle}
                description={pageDescription}
                keywords={seoConfig.keywords.join(', ')}
                canonical={`${seoConfig.canonical}`}
                ogImage={seoConfig.image}
                structuredData={structuredData}
            />

            <div className={styles.container}>
                <div className={styles.titleGroup}>
                    <h1 className={styles.title}>{h1Title}</h1>
                </div>


                <div className={styles.content}>
                    {error && <p className={styles.error}>{error}</p>}


                    <div className={styles.tablesRow}>
                        <div>
                            <h2 className={styles.heading}>D·ª± ƒëo√°n b·∫°ch th·ªß l√¥ cho ng√†y {metadata.predictionFor || ''}</h2>
                            {loadingSoiCau && <SkeletonTable />}
                            {!loadingSoiCau && soiCauResults.length > 0 && (
                                <div className={styles.tableWrapper}>
                                    <table className={styles.tableSoiCau}>
                                        <thead>
                                            <tr>
                                                <th>Ph∆∞∆°ng ph√°p <span className={styles.tooltipIcon}>‚ÑπÔ∏è</span></th>
                                                <th>K·∫øt qu·∫£ d·ª± ƒëo√°n</th>
                                                <th>G·ª£i √Ω nu√¥i khung</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {soiCauResults.map((result, index) => (
                                                <tr key={index}>
                                                    <td className={styles.method}>
                                                        {result.method}
                                                        <span className={styles.tooltip}>
                                                            {result.method === 'Pascal'
                                                                ? 'Gh√©p 2 s·ªë cu·ªëi c·ªßa gi·∫£i ƒë·∫∑c bi·ªát v√† gi·∫£i nh·∫•t, c·ªông c√°c s·ªë li·ªÅn k·ªÅ ƒë·∫øn khi c√≤n 2 s·ªë.'
                                                                : result.method === 'H√¨nh Qu·∫£ Tr√°m'
                                                                    ? 'T√¨m m·∫´u A-B-A ho·∫∑c B-A-B trong c√°c gi·∫£i, s·ªë ·ªü gi·ªØa l√† b·∫°ch th·ªß l√¥.'
                                                                    : result.method === 'T·∫ßn su·∫•t l√¥ c·∫∑p'
                                                                        ? 'Ch·ªçn s·ªë t·ª´ c·∫∑p s·ªë c√≥ t·∫ßn su·∫•t xu·∫•t hi·ªán cao nh·∫•t.'
                                                                        : result.method === 'L√¥ gan k·∫øt h·ª£p'
                                                                            ? 'Ch·ªçn s·ªë g·∫ßn ƒë·∫°t ng∆∞·ª°ng gan nh∆∞ng c√≥ t·∫ßn su·∫•t cao.'
                                                                            : 'Ch·ªçn s·ªë xu·∫•t hi·ªán li√™n t·ª•c trong 2-3 ng√†y g·∫ßn nh·∫•t ·ªü c√πng v·ªã tr√≠ gi·∫£i.'}
                                                        </span>
                                                    </td>
                                                    <td>
                                                        {result.number ? (
                                                            <span className={styles.predictionNumber}>
                                                                {result.number}
                                                            </span>
                                                        ) : ''}
                                                    </td>
                                                    <td>{result.frame || ''}</td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            )}
                            {!loadingSoiCau && soiCauResults.length === 0 && (
                                <p className={styles.noData}>Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ soi c·∫ßu.</p>
                            )}

                            <h3 className={styles.h3}>D·ª± ƒëo√°n t·ªïng h·ª£p: <span className={styles.predictionNumber}>{combinedPrediction}</span></h3>
                            {additionalSuggestions.length > 0 && (
                                <div className={styles.suggestionRow}>
                                    <h3 className={styles.h3}>S·ªë g·ª£i √Ω b·ªï sung:</h3>
                                    <div>
                                        {additionalSuggestions.map((suggestion, index) => (
                                            <span key={index} className={styles.predictionNumber}>
                                                {suggestion}
                                                {index < additionalSuggestions.length - 1 ? ', ' : ''}
                                            </span>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>

                        <div>
                            <h2 className={styles.heading}>D·ª± ƒëo√°n b·∫°ch th·ªß ƒë·ªÅ cho ng√†y {metadata.predictionFor || ''}</h2>
                            {console.log('üîç Debug - bachThuDeResults:', bachThuDeResults, 'length:', bachThuDeResults.length)}
                            {loadingSoiCau && <SkeletonTable />}
                            {!loadingSoiCau && bachThuDeResults.length > 0 && (
                                <div className={styles.tableWrapper}>
                                    <table className={styles.tableSoiCau}>
                                        <thead>
                                            <tr>
                                                <th>Ph∆∞∆°ng ph√°p <span className={styles.tooltipIcon}>‚ÑπÔ∏è</span></th>
                                                <th>K·∫øt qu·∫£ d·ª± ƒëo√°n</th>
                                                <th>G·ª£i √Ω nu√¥i khung</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {bachThuDeResults.map((result, index) => (
                                                <tr key={index}>
                                                    <td className={styles.method}>
                                                        <div>
                                                            <strong>{result.method}</strong>
                                                            <span className={styles.tooltipIcon}>‚ÑπÔ∏è</span>
                                                        </div>
                                                        <span className={styles.tooltip}>
                                                            {result.description}
                                                        </span>
                                                    </td>
                                                    <td>
                                                        {result.numbers && result.numbers.length > 0 ? (
                                                            result.numbers.map((number, idx) => (
                                                                <span key={idx} className={styles.predictionNumber}>
                                                                    {number}
                                                                </span>
                                                            ))
                                                        ) : result.number !== null && result.number !== undefined ? (
                                                            <span className={styles.predictionNumber}>
                                                                {result.number}
                                                            </span>
                                                        ) : (
                                                            <span className={styles.noData}>-</span>
                                                        )}
                                                    </td>
                                                    <td>{result.frame || '3 ng√†y'}</td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            )}
                            {!loadingSoiCau && bachThuDeResults.length === 0 && (
                                <p className={styles.noData}>Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ b·∫°ch th·ªß ƒë·ªÅ.</p>
                            )}

                            <h3 className={styles.h3}>D·ª± ƒëo√°n t·ªïng h·ª£p: <span className={styles.predictionNumber}>{bachThuDeCombined}</span></h3>
                        </div>
                    </div>

                    <div className={styles.tablesRow}>
                        <div>
                            <h2 className={styles.heading}>L·ªãch s·ª≠ d·ª± ƒëo√°n b·∫°ch th·ªß ƒë·ªÅ (14 ng√†y tr∆∞·ªõc)</h2>
                            {loadingSoiCau ? (
                                <SkeletonTable />
                            ) : bachThuDeHistory.length > 0 ? (
                                <div className={styles.tableWrapper}>
                                    <table className={styles.historyTable}>
                                        <thead>
                                            <tr>
                                                <th>Ng√†y</th>
                                                <th>D·ª± ƒëo√°n</th>
                                                <th>Nu√¥i khung</th>
                                                <th>K·∫øt qu·∫£ th·ª±c t·∫ø</th>
                                                <th>Tr·∫°ng th√°i</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {bachThuDeHistory.map((entry, index) => (
                                                <tr key={index}>
                                                    <td>{entry.date}</td>
                                                    <td>{(() => {
                                                        const allNumbers = entry.predictions.map(p => p.numbers || (p.number ? [p.number] : [])).flat();
                                                        const uniqueNumbers = [...new Set(allNumbers)].filter(n => n);
                                                        return uniqueNumbers.join(', ') || '';
                                                    })()}</td>
                                                    <td>
                                                        {entry.frameInfo ? entry.frameInfo.map((f, idx) => (
                                                            <div key={idx} style={{ marginBottom: '4px' }}>
                                                                {f.numbers.join(', ')} ({f.frame})
                                                            </div>
                                                        )) : '3 ng√†y'}
                                                    </td>
                                                    <td>
                                                        {entry.isHit ? (
                                                            <span className={styles.matchedNumber}>
                                                                {entry.hitNumber} (ng√†y {entry.hitDate})
                                                            </span>
                                                        ) : entry.isWaiting ? (
                                                            <span className={styles.waiting}>
                                                                ƒêang ch·ªù...
                                                            </span>
                                                        ) : (
                                                            <span className={styles.miss}>
                                                                Tr∆∞·ª£t
                                                            </span>
                                                        )}
                                                    </td>
                                                    <td className={entry.isHit ? styles.hit : (entry.isWaiting ? styles.waiting : styles.miss)}>
                                                        {entry.isHit ? (
                                                            entry.hitFrameInfo ? (
                                                                `Tr√∫ng ng√†y ${entry.hitDay}/${entry.hitFrameInfo.frameDays} (${entry.hitFrameInfo.predictionDate} ‚Üí ${entry.hitFrameInfo.hitDate})`
                                                            ) : (
                                                                `Tr√∫ng ng√†y ${entry.hitDay}`
                                                            )
                                                        ) : entry.isWaiting ? (
                                                            `ƒêang ch·ªù (khung ${entry.remainingFrames ? entry.remainingFrames.join(', ') : entry.frameInfo.map(f => f.frame).join(', ')})`
                                                        ) : (
                                                            entry.frameInfo ? (
                                                                `Tr∆∞·ª£t (khung ${entry.frameInfo.map(f => f.frame).join(', ')})`
                                                            ) : (
                                                                'Tr∆∞·ª£t'
                                                            )
                                                        )}
                                                    </td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            ) : (
                                <p className={styles.noData}>Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ b·∫°ch th·ªß ƒë·ªÅ.</p>
                            )}
                        </div>
                    </div>

                    <div className={styles.tablesRow}>
                        <div>
                            <h2 className={styles.heading}>L·ªãch s·ª≠ d·ª± ƒëo√°n b·∫°ch th·ªß l√¥ (14 ng√†y tr∆∞·ªõc)</h2>
                            {loadingSoiCau ? (
                                <SkeletonTable />
                            ) : history.length > 0 ? (
                                <div className={styles.tableWrapper}>
                                    <table className={styles.historyTable}>
                                        <thead>
                                            <tr>
                                                <th>Ng√†y</th>
                                                <th>D·ª± ƒëo√°n</th>
                                                <th>K·∫øt qu·∫£ th·ª±c t·∫ø</th>
                                                <th>Tr·∫°ng th√°i</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {history.map((entry, index) => (
                                                <tr key={index}>
                                                    <td>{entry.date}</td>
                                                    <td>{entry.predictedNumbers || ''}</td>
                                                    <td>
                                                        {entry.actualNumbers && entry.actualNumbers.length > 0 ? (
                                                            entry.actualNumbers.map((num, idx) => (
                                                                <span key={idx} className={styles.matchedNumber}>
                                                                    {num}{idx < entry.actualNumbers.length - 1 ? ', ' : ''}
                                                                </span>
                                                            ))
                                                        ) : (
                                                            <span className={styles.waitingResult}>Ch∆∞a c√≥ k·∫øt qu·∫£</span>
                                                        )}
                                                    </td>
                                                    <td className={entry.isHit ? styles.hit : (entry.actualNumbers && entry.actualNumbers.length > 0 ? styles.miss : styles.waiting)}>
                                                        {entry.isHit ? 'Tr√∫ng' : (entry.actualNumbers && entry.actualNumbers.length > 0 ? 'Tr∆∞·ª£t' : 'Ch∆∞a c√≥ k·∫øt qu·∫£')}
                                                    </td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            ) : (
                                <p className={styles.noData}>Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠.</p>
                            )}
                        </div>

                    </div>

                    <div className={styles.groupContent}>
                        <h2 className={styles.heading}>Ph∆∞∆°ng Ph√°p Soi C·∫ßu Mi·ªÅn B·∫Øc - So S√°nh V·ªõi ƒê·ªëi Th·ªß</h2>
                        <div className={styles.contentWrapper}>
                            <p className={styles.desc} style={{ fontSize: '16px', lineHeight: '1.8', marginBottom: '20px' }}>
                                <strong>Soi c·∫ßu mi·ªÅn b·∫Øc t·∫°i taodandewukong.pro</strong> s·ª≠ d·ª•ng <strong>5 ph∆∞∆°ng ph√°p truy·ªÅn th·ªëng</strong> ƒë√£ ƒë∆∞·ª£c ki·ªÉm ch·ª©ng, 
                                kh√°c bi·ªát so v·ªõi <strong>xskt.com.vn</strong>, <strong>xosothantai.mobi</strong>, <strong>atrungroi.com</strong>, <strong>xsmn247.me</strong>. 
                                Ch√∫ng t√¥i cung c·∫•p nhi·ªÅu ph∆∞∆°ng ph√°p h∆°n, l·ªãch s·ª≠ d·ª± ƒëo√°n minh b·∫°ch, v√† ho√†n to√†n mi·ªÖn ph√≠ 100%.
                            </p>
                            
                            <h3 className={styles.h3}>1. Ph∆∞∆°ng Ph√°p Soi C·∫ßu Pascal</h3>
                            <p className={styles.desc}>
                                <strong>Soi c·∫ßu Pascal mi·ªÅn b·∫Øc</strong> (soi cau Pascal mien bac) l√† ph∆∞∆°ng ph√°p gh√©p 10 ch·ªØ s·ªë cu·ªëi c·ªßa gi·∫£i ƒë·∫∑c bi·ªát v√† gi·∫£i nh·∫•t, 
                                sau ƒë√≥ t√≠nh tam gi√°c Pascal ƒë·ªÉ t√¨m ra s·ªë d·ª± ƒëo√°n. Ph∆∞∆°ng ph√°p n√†y kh√°c v·ªõi <strong>xskt</strong> v√† <strong>xosothantai</strong> 
                                v√¨ ch√∫ng t√¥i s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß 10 ch·ªØ s·ªë thay v√¨ ch·ªâ 4 ch·ªØ s·ªë.
                            </p>
                            
                            <h3 className={styles.h3}>2. Ph∆∞∆°ng Ph√°p Soi C·∫ßu H√¨nh Qu·∫£ Tr√°m</h3>
                            <p className={styles.desc}>
                                <strong>Soi c·∫ßu h√¨nh qu·∫£ tr√°m</strong> (soi cau hinh qua tram) t√¨m m·∫´u A-B-A ho·∫∑c B-A-B trong c√°c gi·∫£i G3, G4, G5. 
                                S·ªë ·ªü gi·ªØa l√† b·∫°ch th·ªß l√¥. Ph∆∞∆°ng ph√°p n√†y ∆∞u ti√™n t√¨m trong b·∫£ng 3 h√†ng (G3, G4, G5) nh∆∞ m√¥ t·∫£ truy·ªÅn th·ªëng, 
                                t·ªët h∆°n c√°c trang <strong>xsmn247</strong> hay <strong>atrungroi</strong> v√¨ logic r√µ r√†ng h∆°n.
                            </p>
                            
                            <h3 className={styles.h3}>3. Ph∆∞∆°ng Ph√°p Soi C·∫ßu T·∫ßn Su·∫•t L√¥ C·∫∑p</h3>
                            <p className={styles.desc}>
                                <strong>Soi c·∫ßu t·∫ßn su·∫•t l√¥ c·∫∑p</strong> (soi cau tan suat lo cap) t√≠nh t·∫ßn su·∫•t xu·∫•t hi·ªán c·ªßa c√°c c·∫∑p s·ªë (AB v√† BA l√† c√πng 1 c·∫∑p) 
                                trong 30 ng√†y g·∫ßn nh·∫•t. √Åp d·ª•ng quy t·∫Øc: N·∫øu 1 s·ªë trong c·∫∑p ƒë√£ v·ªÅ h√¥m qua, ch·ªçn s·ªë kia. 
                                Logic n√†y chi ti·∫øt h∆°n so v·ªõi <strong>xskt.com.vn</strong> v√† <strong>xosothantai.mobi</strong>.
                            </p>
                            
                            <h3 className={styles.h3}>4. Ph∆∞∆°ng Ph√°p Soi C·∫ßu L√¥ Gan K·∫øt H·ª£p</h3>
                            <p className={styles.desc}>
                                <strong>Soi c·∫ßu l√¥ gan</strong> (soi cau lo gan) t√≠nh s·ªë ng√†y gan cho m·ªói l√¥ (00-99), ch·ªâ l·∫•y l√¥ gan {'>'}8 ng√†y. 
                                ∆Øu ti√™n l√¥ gan s·∫Øp n·ªï (9-12 ng√†y) v√† k·∫øt h·ª£p v·ªõi ch·ªØ s·ªë cu·ªëi c·ªßa gi·∫£i ƒë·∫∑c bi·ªát. 
                                Ph∆∞∆°ng ph√°p n√†y tinh t·∫ø h∆°n <strong>xsmn247</strong> v√¨ c√≥ b·ªô l·ªçc chi ti·∫øt h∆°n.
                            </p>
                            
                            <h3 className={styles.h3}>5. Ph∆∞∆°ng Ph√°p Soi C·∫ßu L√¥ R∆°i</h3>
                            <p className={styles.desc}>
                                <strong>Soi c·∫ßu l√¥ r∆°i</strong> (soi cau lo roi) xem x√©t t·∫•t c·∫£ 27 l√¥ t·ª´ ng√†y h√¥m qua (ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ gi·∫£i). 
                                ∆Øu ti√™n: L√¥ t·ª´ gi·∫£i ƒë·∫∑c bi·ªát/Gi·∫£i nh·∫•t ‚Üí L√¥ 2 nh√°y ‚Üí L√¥ r∆°i li√™n t·ª•c 2-3 ng√†y. 
                                Ph∆∞∆°ng ph√°p n√†y to√†n di·ªán h∆°n c√°c trang ƒë·ªëi th·ªß v√¨ xem x√©t ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ gi·∫£i.
                            </p>
                            
                            <h3 className={styles.h3}>∆Øu ƒêi·ªÉm So V·ªõi ƒê·ªëi Th·ªß (XSKT, Xosothantai, Atrungroi, XSMN247)</h3>
                            <ul className={styles.desc} style={{ fontSize: '16px', lineHeight: '1.8', paddingLeft: '20px' }}>
                                <li>‚úÖ <strong>Nhi·ªÅu ph∆∞∆°ng ph√°p h∆°n:</strong> 5 ph∆∞∆°ng ph√°p vs 2-3 ph∆∞∆°ng ph√°p c·ªßa ƒë·ªëi th·ªß</li>
                                <li>‚úÖ <strong>Logic chi ti·∫øt h∆°n:</strong> M·ªói ph∆∞∆°ng ph√°p ƒë∆∞·ª£c n√¢ng c·∫•p theo m√¥ t·∫£ truy·ªÅn th·ªëng chu·∫©n</li>
                                <li>‚úÖ <strong>L·ªãch s·ª≠ minh b·∫°ch:</strong> Hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß l·ªãch s·ª≠ d·ª± ƒëo√°n 14 ng√†y, ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c</li>
                                <li>‚úÖ <strong>Ho√†n to√†n mi·ªÖn ph√≠:</strong> Kh√¥ng gi·ªõi h·∫°n, kh√¥ng c·∫ßn ƒëƒÉng k√Ω, kh√¥ng c√≥ qu·∫£ng c√°o popup</li>
                                <li>‚úÖ <strong>C·∫≠p nh·∫≠t realtime:</strong> D·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t ngay khi c√≥ k·∫øt qu·∫£ x·ªï s·ªë</li>
                                <li>‚úÖ <strong>Deterministic:</strong> C√πng m·ªôt ng√†y lu√¥n cho c√πng m·ªôt k·∫øt qu·∫£, kh√¥ng random</li>
                            </ul>
                            
                            <h3 className={styles.h3}>C√°ch S·ª≠ D·ª•ng Soi C·∫ßu Mi·ªÅn B·∫Øc:</h3>
                            <ol className={styles.desc} style={{ fontSize: '16px', lineHeight: '1.8', paddingLeft: '20px' }}>
                                <li>H·ªá th·ªëng t·ª± ƒë·ªông t√≠nh to√°n cho ng√†y h√¥m nay v·ªõi d·ªØ li·ªáu 14 ng√†y g·∫ßn nh·∫•t</li>
                                <li>Xem k·∫øt qu·∫£ t·ª´ 5 ph∆∞∆°ng ph√°p v√† s·ªë g·ª£i √Ω b·ªï sung</li>
                                <li>Ki·ªÉm tra l·ªãch s·ª≠ d·ª± ƒëo√°n ƒë·ªÉ ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c c·ªßa t·ª´ng ph∆∞∆°ng ph√°p</li>
                                <li>So s√°nh v·ªõi <strong>xskt</strong>, <strong>xosothantai</strong>, <strong>atrungroi</strong> ƒë·ªÉ th·∫•y s·ª± kh√°c bi·ªát</li>
                                <li>N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, th·ª≠ ng√†y g·ª£i √Ω t·ª´ h·ªá th·ªëng ho·∫∑c ch·ªçn ng√†y kh√°c</li>
                            </ol>
                            
                            <p className={styles.desc} style={{ fontSize: '16px', lineHeight: '1.8', marginTop: '20px', padding: '15px', backgroundColor: '#f0f9ff', borderRadius: '8px' }}>
                                <strong>üí° L∆∞u √Ω:</strong> Soi c·∫ßu mi·ªÅn b·∫Øc (soi cau mien bac) t·∫°i taodandewukong.pro ho√†n to√†n mi·ªÖn ph√≠, 
                                kh√¥ng c·∫ßn ƒëƒÉng k√Ω, kh√¥ng c√≥ qu·∫£ng c√°o popup nh∆∞ m·ªôt s·ªë trang ƒë·ªëi th·ªß. K·∫øt qu·∫£ ƒë∆∞·ª£c t√≠nh to√°n deterministic, 
                                c√πng m·ªôt ng√†y lu√¥n cho c√πng m·ªôt k·∫øt qu·∫£, kh√¥ng ph·ª• thu·ªôc v√†o th·ªùi gian truy c·∫≠p.
                            </p>
                        </div>
                    </div>
                </div>

                <button className={styles.scrollToTopBtn} onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}>
                    ‚Üë
                </button>
            </div>
        </Layout>
    );
};

export async function getServerSideProps() {
    // Ch·ªâ tr·∫£ v·ªÅ props c∆° b·∫£n, ƒë·ªÉ client-side fetch data
    const currentTime = new Date();
    const defaultDate = currentTime;

    return {
        props: {
            initialSoiCauData: { predictions: [], combinedPrediction: '', additionalSuggestions: [], metadata: {}, dataRange: { days: 10 }, history: [] },
            initialDate: defaultDate.toISOString(),
            initialHistory: [],
            initialBachThuDeData: { predictions: [], combinedPrediction: '', metadata: {}, history: [] },
        },
    };
}

export default SoiCauPage;

