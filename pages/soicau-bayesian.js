import React, { useState, useEffect, useCallback, useMemo, memo } from 'react';
import Head from 'next/head';
// Optimized date handling - using native Date for better performance
const formatDate = (date) => {
    return new Date(date).toISOString().split('T')[0];
};

const formatDisplayDate = (date) => {
    return new Date(date).toLocaleDateString('vi-VN');
};

// CSS Modules
import styles from '../styles/soicauBayesian.module.css';

// Components
import Layout from '../components/Layout';
import LoadingSpinner from '../components/LoadingSpinner';
import ErrorMessage from '../components/ErrorMessage';
import PerformanceMonitor from '../components/PerformanceMonitor';
import SoiCauHistoryDe from '../components/SoiCauHistoryDe';

// Utils
import { fetchWithRetry, handle429Error } from '../utils/apiUtils';

// API Service
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';

const SoiCauBayesian = () => {
    // State management
    const [selectedDate, setSelectedDate] = useState(formatDate(new Date()));
    const [selectedMethod, setSelectedMethod] = useState('ensemble'); // Always use ensemble
    // Force method to ensemble - no user choice
    const FORCED_METHOD = 'ensemble';
    const [selectedType, setSelectedType] = useState('de');
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [activeTab, setActiveTab] = useState('predictions'); // Ch·ªâ c√≥ tab predictions
    const [currentPredictions, setCurrentPredictions] = useState(null);
    const [dataDescription, setDataDescription] = useState(null);
    const [dataCreationLoading, setDataCreationLoading] = useState(false);
    // State ƒë·ªÉ track ng√†y hi·ªán t·∫°i ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω
    const [currentProcessingDate, setCurrentProcessingDate] = useState(formatDate(new Date()));
    // State ƒë·ªÉ track xem c√≥ d·ªØ li·ªáu cho ng√†y ƒë∆∞·ª£c ch·ªçn kh√¥ng
    const [hasDataForSelectedDate, setHasDataForSelectedDate] = useState(false);
    // Th√™m states m·ªõi
    const [extendedFeatures, setExtendedFeatures] = useState(null);
    const [lstmStats, setLstmStats] = useState({});


    // Fetch soi c·∫ßu by date
    const fetchSoiCauByDate = useCallback(async (date) => {
        try {
            setLoading(true);
            setError(null);

            const response = await fetchWithRetry(`${API_BASE_URL}/api/soicau-page/date/${date}`);
            const result = await response.json();

            if (result.success) {
                return result.data;
            } else {
                throw new Error(result.message || 'Kh√¥ng t√¨m th·∫•y soi c·∫ßu cho ng√†y n√†y');
            }
        } catch (err) {
            console.error('Soi c·∫ßu fetch error:', err);
            setError(handle429Error(err));
            return null;
        } finally {
            setLoading(false);
        }
    }, []);

    // Fetch predictions
    const fetchPredictions = useCallback(async (method, type, date, limit = 20) => {
        try {
            const params = new URLSearchParams({
                limit: limit.toString(),
                date: date
            });

            const response = await fetchWithRetry(`${API_BASE_URL}/api/soicau-page/predictions/${method}/${type}?${params}`);
            const result = await response.json();

            if (result.success) {
                // API tr·∫£ v·ªÅ array predictions, c·∫ßn wrap th√†nh object
                return {
                    method: method,
                    type: type,
                    predictions: result.data.predictions || result.data
                };
            } else {
                throw new Error(result.message || 'L·ªói khi t·∫£i predictions');
            }
        } catch (err) {
            console.error('Predictions fetch error:', err);
            setError(handle429Error(err));
            return null;
        }
    }, []);

    // Fetch history
    const fetchHistory = useCallback(async (limit = 30, days = 30) => {
        try {
            const params = new URLSearchParams({
                limit: limit.toString(),
                days: days.toString()
            });

            const response = await fetchWithRetry(`${API_BASE_URL}/api/soicau-page/history?${params}`);
            const result = await response.json();

            if (result.success) {
                return result.data;
            } else {
                throw new Error(result.message || 'L·ªói khi t·∫£i l·ªãch s·ª≠');
            }
        } catch (err) {
            console.error('History fetch error:', err);
            setError(handle429Error(err));
            return null;
        }
    }, []);

    // Fetch accuracy stats
    const fetchAccuracyStats = useCallback(async (days = 30) => {
        try {
            const params = new URLSearchParams({
                days: days.toString()
            });

            const response = await fetchWithRetry(`${API_BASE_URL}/api/soicau-page/accuracy?${params}`);
            const result = await response.json();

            if (result.success) {
                return result.data;
            } else {
                throw new Error(result.message || 'L·ªói khi t·∫£i th·ªëng k√™ ƒë·ªô ch√≠nh x√°c');
            }
        } catch (err) {
            console.error('Accuracy stats fetch error:', err);
            setError(handle429Error(err));
            return null;
        }
    }, []);

    // Load predictions for selected date and method - ALWAYS use ensemble
    const loadPredictions = useCallback(async () => {
        try {
            setLoading(true);
            setError(null);

            // T·ªêI ∆ØU: Ch·ªâ g·ªçi 1 API duy nh·∫•t ƒë·ªÉ l·∫•y t·∫•t c·∫£ d·ªØ li·ªáu
            const response = await fetchWithRetry(`${API_BASE_URL}/api/soicau-page/date/${selectedDate}`);
            const data = await response.json();

            if (data.success && data.data) {
                // L·∫•y predictions t·ª´ data ch√≠nh
                if (data.data.predictions && data.data.predictions.ensemble) {
                    const ensemblePredictions = data.data.predictions.ensemble[selectedType] || [];
                    setCurrentPredictions({
                        method: 'ensemble',
                        type: selectedType,
                        predictions: ensemblePredictions
                    });
                }

                // L·∫•y extended features t·ª´ data ch√≠nh
                setExtendedFeatures(data.data.extendedFeatures || null);
                setLstmStats(data.data.lstmStats || {});
                console.log('‚úÖ Predictions loaded from single API call');
            } else {
                console.warn('‚ö†Ô∏è No data available:', data.message || 'No data available');
                setCurrentPredictions(null);
                setExtendedFeatures(null);
                setLstmStats({});
            }
        } catch (err) {
            console.error('Load predictions error:', err);
            setError(handle429Error(err));
            setCurrentPredictions(null);
        } finally {
            setLoading(false);
        }
    }, [FORCED_METHOD, selectedType, selectedDate, fetchPredictions]);

    // Generate soi c·∫ßu manually (create and save new predictions)
    const generateSoiCau = useCallback(async () => {
        try {
            setLoading(true);
            setError(null);

            console.log('üéØ Generating soi c·∫ßu for date:', currentProcessingDate);

            // Generate new predictions and save to database
            const response = await fetchWithRetry(`${API_BASE_URL}/api/soicau-page/generate-soicau`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache'
                },
                body: JSON.stringify({
                    date: currentProcessingDate,
                    method: FORCED_METHOD, // Always use ensemble
                    type: selectedType,
                    // TƒÉng limit cho lo ƒë·ªÉ c√≥ nhi·ªÅu d·ªØ li·ªáu h∆°n (lo c·∫ßn nhi·ªÅu predictions h∆°n ƒë·ªÅ)
                    limit: selectedType === 'lo' ? 50 : 20
                })
            });

            const result = await response.json();

            if (result.success) {
                console.log('‚úÖ Soi c·∫ßu generated and saved successfully:', result.data);

                // Immediately load predictions from API to ensure consistency
                await loadPredictions();

                // Refresh data description ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin m·ªõi
                if (result.data.cached) {
                    setDataDescription({
                        predictionDate: currentProcessingDate,
                        dataSource: `D·ªØ li·ªáu ƒë√£ c√≥ s·∫µn`,
                        explanation: `K·∫øt qu·∫£ soi c·∫ßu cho ng√†y ${formatDisplayDate(currentProcessingDate)} ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng`
                    });
                } else {
                    setDataDescription({
                        predictionDate: currentProcessingDate,
                        dataSource: `üß† Ultra Advanced AI Soi C·∫ßu v2.0`,
                        explanation: `K·∫øt qu·∫£ soi c·∫ßu c·ª±c k·ª≥ cao si√™u cho ng√†y ${formatDisplayDate(currentProcessingDate)} v·ªõi 10 ph∆∞∆°ng ph√°p AI, Neural Networks, Quantum Computing, Genetic Algorithm, Chaos Theory v√† Fractal Analysis`
                    });
                }

                // Refresh dashboard data
                // await fetchDashboardData(); // ƒê√£ x√≥a dashboard
            } else {
                throw new Error(result.message || 'L·ªói khi t·∫°o soi c·∫ßu');
            }
        } catch (err) {
            console.error('Generate soi c·∫ßu error:', err);
            setError(handle429Error(err));
            alert('L·ªói khi t·∫°o soi c·∫ßu: ' + handle429Error(err));
        } finally {
            setLoading(false);
        }
    }, [currentProcessingDate, selectedMethod, selectedType]);

    // Create data collection manually using selected date
    const createDataCollection = useCallback(async () => {
        // Prevent multiple calls
        if (dataCreationLoading) {
            console.log('‚ö†Ô∏è Data creation already in progress, skipping...');
            return;
        }

        try {
            setDataCreationLoading(true);
            setError(null);

            // Use the current processing date to ensure we get the correct date
            const targetDate = currentProcessingDate;
            console.log('üéØ Current processing date:', currentProcessingDate);
            const targetDateObj = new Date(targetDate);
            const yesterday = new Date(targetDateObj);
            yesterday.setDate(yesterday.getDate() - 1);

            // Create data description based on selected date
            const dataDescription = {
                predictionDate: targetDate,
                dataSource: `${formatDisplayDate(yesterday)} tr·ªü v·ªÅ tr∆∞·ªõc`,
                explanation: `D·ªØ li·ªáu d·ª± ƒëo√°n cho ng√†y ${formatDisplayDate(targetDate)} ƒë∆∞·ª£c t·∫°o t·ª´ d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ ${formatDisplayDate(yesterday)} tr·ªü v·ªÅ tr∆∞·ªõc (ch∆∞a bao g·ªìm k·∫øt qu·∫£ ${formatDisplayDate(yesterday)})`
            };

            console.log('üéØ Creating data collection for date:', targetDate);
            console.log('üìä Data description:', dataDescription);

            const response = await fetchWithRetry(`${API_BASE_URL}/api/soicau-page/generate`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    date: targetDate,
                    days: 30,
                    topK: 5
                })
            });

            const result = await response.json();

            if (result.success) {
                console.log('‚úÖ Data collection created successfully:', result.data);
                setDataDescription(dataDescription);

                // Update selected date to the target date
                setSelectedDate(targetDate);
                setActiveTab('predictions');

                // Clear current predictions to show that data is ready
                setCurrentPredictions(null);

                if (result.cached) {
                    alert(`‚úÖ D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i cho ng√†y ${formatDisplayDate(targetDate)}!\n\nüìä B·ªô d·ªØ li·ªáu ƒë√£ c√≥ s·∫µn. Nh·∫•n n√∫t "Soi C·∫ßu" ƒë·ªÉ xem k·∫øt qu·∫£ d·ª± ƒëo√°n.`);
                } else {
                    alert(`‚úÖ T·∫°o b·ªô d·ªØ li·ªáu th√†nh c√¥ng cho ng√†y ${formatDisplayDate(targetDate)}!\n\nüìä B·ªô d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫°o. Nh·∫•n n√∫t "Soi C·∫ßu" ƒë·ªÉ xem k·∫øt qu·∫£ d·ª± ƒëo√°n.`);
                }

                // Kh√¥ng c·∫ßn g·ªçi checkDataExists n·ªØa v√¨ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
                // Ch·ªâ c·∫ßn set dataDescription ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin
                setHasDataForSelectedDate(true);
            } else {
                throw new Error(result.message || 'L·ªói khi t·∫°o b·ªô d·ªØ li·ªáu');
            }
        } catch (err) {
            console.error('Create data collection error:', err);
            setError(handle429Error(err));
            setHasDataForSelectedDate(false);

            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói chi ti·∫øt h∆°n
            let errorMessage = 'L·ªói khi t·∫°o b·ªô d·ªØ li·ªáu: ' + err.message;
            if (err.message.includes('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu l·ªãch s·ª≠')) {
                errorMessage = `Kh√¥ng th·ªÉ t·∫°o b·ªô d·ªØ li·ªáu cho ng√†y ${formatDisplayDate(targetDate)}.\n\nL√Ω do: Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ x·ªï s·ªë cho kho·∫£ng th·ªùi gian c·∫ßn thi·∫øt.\n\nVui l√≤ng ch·ªçn ng√†y kh√°c ho·∫∑c ki·ªÉm tra xem database c√≥ ƒë·ªß d·ªØ li·ªáu kh√¥ng.`;
            }

            alert(errorMessage);
        } finally {
            setDataCreationLoading(false);
        }
    }, [dataCreationLoading, currentProcessingDate]);

    // Check if data exists for selected date
    const checkDataExists = useCallback(async (date) => {
        try {
            console.log('üîç Checking data exists for date:', date);
            const response = await fetchWithRetry(`${API_BASE_URL}/api/soicau-page/date/${date}`);

            // Backend gi·ªù tr·∫£ v·ªÅ 200 ngay c·∫£ khi kh√¥ng c√≥ d·ªØ li·ªáu
            if (!response.ok) {
                console.log(`‚ö†Ô∏è API returned ${response.status}, treating as no data`);
                setCurrentPredictions(null);
                setDataDescription(null);
                return false;
            }

            const result = await response.json();
            console.log('üìä Data check result:', result);

            // Ki·ªÉm tra c·∫£ result.success v√† result.data (v√† result.hasData)
            if (result.success && result.data && result.data !== null) {
                // Data exists, set data description but don't load predictions yet
                console.log('‚úÖ Data exists for date:', date);
                setDataDescription({
                    predictionDate: date,
                    dataSource: `D·ªØ li·ªáu ƒë√£ c√≥ s·∫µn`,
                    explanation: `D·ªØ li·ªáu d·ª± ƒëo√°n cho ng√†y ${formatDisplayDate(date)} ƒë√£ ƒë∆∞·ª£c t·∫°o tr∆∞·ªõc ƒë√≥`
                });
                // Don't set currentPredictions here, let user click "Soi C·∫ßu" button
                setCurrentPredictions(null);
                return true;
            } else {
                // No data exists (result.data is null ho·∫∑c result.hasData === false)
                console.log(`üìã No data found for date ${date}: ${result.message || 'No data available'}`);
                setCurrentPredictions(null);
                setDataDescription(null);
                return false;
            }
        } catch (err) {
            console.error('‚ùå Check data exists error:', err);
            // X·ª≠ l√Ω l·ªói m·ªôt c√°ch graceful - kh√¥ng crash app
            setCurrentPredictions(null);
            setDataDescription(null);
            return false;
        }
    }, []);


    // Initial load
    useEffect(() => {
        // fetchDashboardData(); // ƒê√£ x√≥a dashboard
        const initialDate = formatDate(new Date());
        setCurrentProcessingDate(initialDate);
        // Check if data exists for current selected date and load predictions immediately
        const checkInitialData = async () => {
            try {
                const hasData = await checkDataExists(initialDate);
                setHasDataForSelectedDate(hasData);

                // If data exists, load predictions immediately
                if (hasData) {
                    await loadPredictions();
                }
            } catch (err) {
                console.error('Error checking initial data:', err);
            } finally {
                setLoading(false); // Quan tr·ªçng: set loading = false sau khi ki·ªÉm tra xong
            }
        };
        checkInitialData();
    }, []); // Only run once on mount

    // Handle date change
    const handleDateChange = async (date) => {
        setSelectedDate(date);
        setCurrentProcessingDate(date);
        setActiveTab('predictions');
        // Clear previous data when changing date
        setDataDescription(null);
        setCurrentPredictions(null);
        // Check if data exists for new date
        const hasData = await checkDataExists(date);
        setHasDataForSelectedDate(hasData);

        // If data exists, load predictions immediately
        if (hasData) {
            await loadPredictions();
        }
    };

    // Handle method change
    const handleMethodChange = (method) => {
        setSelectedMethod(method);
        // Load predictions for new method
        loadPredictions();
    };

    // Handle type change
    const handleTypeChange = (type) => {
        setSelectedType(type);
        // Load predictions for new type
        loadPredictions();
    };

    // Format percentage
    const formatPercentage = (value) => {
        return parseFloat(value).toFixed(2) + '%';
    };

    // Get method display name
    const getMethodDisplayName = (method) => {
        const names = {
            cdm: 'CDM (AI c∆° b·∫£n)',
            efdm: 'EFDM (Extended Flexible)',
            cf: 'Collaborative Filtering',
            ensemble: 'üéØ Ensemble (K·∫øt h·ª£p t·∫•t c·∫£ ph∆∞∆°ng ph√°p AI)',
            advanced: 'ü§ñ Advanced Soi C·∫ßu (7 ph∆∞∆°ng ph√°p AI)'
        };
        return names[method] || method;
    };

    // Get type display name
    const getTypeDisplayName = (type) => {
        return type === 'de' ? 'ƒê·ªÅ (2 s·ªë cu·ªëi gi·∫£i ƒë·∫∑c bi·ªát)' : 'L√¥ (2 s·ªë cu·ªëi t·∫•t c·∫£ gi·∫£i)';
    };

    // Render prediction card with statistical confidence - Memoized for performance
    const renderPredictionCard = useCallback((prediction, index, key, isHit = false) => {
        const isTop3 = index < 3;
        const cardClass = isTop3 ? styles.topPrediction : styles.prediction;
        const hitClass = isHit ? styles.hit : '';

        // Safe access to extendedFeatures with proper null checks
        const hotCold = (extendedFeatures && extendedFeatures.hotCold && extendedFeatures.hotCold[prediction.number])
            ? extendedFeatures.hotCold[prediction.number]
            : 'normal';
        const badgeClass = hotCold === 'hot' ? styles.hotBadge : hotCold === 'cold' ? styles.coldBadge : '';

        // T√≠nh ƒë·ªô tin c·∫≠y d·ª±a tr√™n x√°c su·∫•t - C·∫≠p nh·∫≠t cho realistic scoring
        const probability = parseFloat(prediction.percentage) || 0;
        let confidenceLevel = 'Th·∫•p';
        let confidenceColor = '#dc3545';

        if (probability >= 10.0) {
            confidenceLevel = 'R·∫•t Cao';
            confidenceColor = '#28a745';
        } else if (probability >= 7.0) {
            confidenceLevel = 'Cao';
            confidenceColor = '#17a2b8';
        } else if (probability >= 4.0) {
            confidenceLevel = 'Trung B√¨nh';
            confidenceColor = '#ffc107';
        } else if (probability >= 2.0) {
            confidenceLevel = 'Th·∫•p-Trung B√¨nh';
            confidenceColor = '#fd7e14';
        }

        // Hi·ªÉn th·ªã th√¥ng tin ƒë·ªôc ƒë√°o n·∫øu c√≥
        const uniquenessInfo = prediction.uniqueness ? (
            <div style={{
                fontSize: '10px',
                color: prediction.uniqueness > 1.2 ? '#e74c3c' : prediction.uniqueness > 1.0 ? '#f39c12' : '#95a5a6',
                marginTop: '2px',
                fontWeight: 'bold'
            }}>
                {prediction.uniqueness > 1.2 ? 'üî•' : prediction.uniqueness > 1.0 ? '‚≠ê' : 'üí´'}
                {(prediction.uniqueness * 100).toFixed(0)}%
            </div>
        ) : null;

        // Hi·ªÉn th·ªã special note n·∫øu c√≥
        const specialNote = prediction.specialNote ? (
            <div style={{
                fontSize: '9px',
                color: '#7f8c8d',
                marginTop: '2px',
                fontStyle: 'italic'
            }}>
                {prediction.specialNote}
            </div>
        ) : null;

        return (
            <div key={key} className={`${cardClass} ${hitClass}`}>
                <div className={styles.predictionNumber}>
                    {prediction.number}
                </div>
                <div className={styles.predictionPercentage}>
                    {formatPercentage(prediction.percentage)}
                </div>
                {isTop3 && (
                    <div className={styles.topBadge}>
                        Top {index + 1}
                    </div>
                )}
                {isHit && (
                    <div className={styles.hitBadge}>
                        Tr√∫ng
                    </div>
                )}
                <div className={badgeClass}>{hotCold}</div>
                <div style={{
                    fontSize: '11px',
                    color: confidenceColor,
                    marginTop: '4px',
                    fontWeight: 'bold'
                }}>
                    ‚≠ê {confidenceLevel}
                </div>
                {uniquenessInfo}
                {specialNote}
            </div>
        );
    }, [extendedFeatures, styles]);



    // Memoized predictions render to keep hooks order stable
    const memoizedPredictionCards = useMemo(() => {
        if (!currentPredictions || !currentPredictions.predictions) return null;
        return currentPredictions.predictions.map((prediction, index) =>
            renderPredictionCard(prediction, index, `${prediction.number}-${index}`)
        );
    }, [currentPredictions, renderPredictionCard]);

    // Render extended features
    const renderExtendedFeatures = () => {
        if (!extendedFeatures || !extendedFeatures.hotCold) return null;
        return (
            <div className={styles.extendedSection}>
                <h4>üìä Extended Features</h4>
                <div>Top Hot: {Object.keys(extendedFeatures.hotCold).filter(n => extendedFeatures.hotCold[n] === 'hot').slice(0, 5).join(', ')}</div>
                <div>Top Cold: {Object.keys(extendedFeatures.hotCold).filter(n => extendedFeatures.hotCold[n] === 'cold').slice(0, 5).join(', ')}</div>
                {/* T∆∞∆°ng t·ª± cho positionStats */}
            </div>
        );
    }

    if (loading) {
        return <LoadingSpinner />;
    }

    if (error) {
        return <ErrorMessage message={error} onRetry={() => window.location.reload()} />;
    }

    return (
        <Layout>
            <PerformanceMonitor />
            <Head>
                <title>Soi C·∫ßu Mi·ªÅn B·∫Øc - Soi C·∫ßu MB - D·ª± ƒêo√°n XSMB H√¥m Nay Mi·ªÖn Ph√≠ | Soi C·∫ßu AI</title>
                <meta name="description" content="Soi c·∫ßu mi·ªÅn b·∫Øc mi·ªÖn ph√≠ ch√≠nh x√°c nh·∫•t. D·ª± ƒëo√°n XSMB h√¥m nay, soi c·∫ßu MB, soi c·∫ßu mi·ªÅn b·∫Øc v·ªõi AI. Soi c·∫ßu b·∫°ch th·ªß, l√¥ gan, th·ªëng k√™ v·ªã tr√≠ XSMB. Soi c·∫ßu ch√≠nh x√°c 100%." />
                <meta name="keywords" content="soi c·∫ßu mi·ªÅn b·∫Øc, soi cau mien bac, soi c·∫ßu MB, soi cau MB, d·ª± ƒëo√°n XSMB, du doan XSMB, soi c·∫ßu XSMB, soi c·∫ßu mi·ªÖn ph√≠, soi c·∫ßu ch√≠nh x√°c, soi c·∫ßu b·∫°ch th·ªß, l√¥ gan XSMB, th·ªëng k√™ v·ªã tr√≠ MB, c·∫ßu MB, d·ª± ƒëo√°n k·∫øt qu·∫£ x·ªï s·ªë, soi c·∫ßu AI, soi cau AI" />
                <meta name="robots" content="index, follow" />
                <meta name="author" content="Soi C·∫ßu AI" />
                <meta property="og:title" content="Soi C·∫ßu Mi·ªÅn B·∫Øc - Soi C·∫ßu MB - D·ª± ƒêo√°n XSMB H√¥m Nay Mi·ªÖn Ph√≠" />
                <meta property="og:description" content="Soi c·∫ßu mi·ªÅn b·∫Øc mi·ªÖn ph√≠ ch√≠nh x√°c nh·∫•t. D·ª± ƒëo√°n XSMB h√¥m nay v·ªõi AI. Soi c·∫ßu b·∫°ch th·ªß, l√¥ gan, th·ªëng k√™ v·ªã tr√≠ XSMB." />
                <meta property="og:type" content="website" />
                <meta name="twitter:card" content="summary_large_image" />
                <meta name="twitter:title" content="Soi C·∫ßu Mi·ªÅn B·∫Øc - Soi C·∫ßu MB - D·ª± ƒêo√°n XSMB H√¥m Nay" />
                <meta name="twitter:description" content="Soi c·∫ßu mi·ªÅn b·∫Øc mi·ªÖn ph√≠ ch√≠nh x√°c nh·∫•t. D·ª± ƒëo√°n XSMB h√¥m nay v·ªõi AI." />
                <link rel="canonical" href={`${process.env.NEXT_PUBLIC_SITE_URL || 'https://www.taodandewukong.pro'}/soicau-bayesian`} />
                <script
                    type="application/ld+json"
                    dangerouslySetInnerHTML={{
                        __html: JSON.stringify({
                            "@context": "https://schema.org",
                            "@type": "WebPage",
                            "name": "Soi C·∫ßu Mi·ªÅn B·∫Øc - Soi C·∫ßu MB - D·ª± ƒêo√°n XSMB H√¥m Nay",
                            "description": "Soi c·∫ßu mi·ªÅn b·∫Øc mi·ªÖn ph√≠ ch√≠nh x√°c nh·∫•t. D·ª± ƒëo√°n XSMB h√¥m nay v·ªõi AI. Soi c·∫ßu b·∫°ch th·ªß, l√¥ gan, th·ªëng k√™ v·ªã tr√≠ XSMB.",
                            "url": `${process.env.NEXT_PUBLIC_SITE_URL || 'https://www.taodandewukong.pro'}/soicau-bayesian`,
                            "mainEntity": {
                                "@type": "Service",
                                "name": "Soi C·∫ßu AI",
                                "description": "D·ªãch v·ª• soi c·∫ßu mi·ªÅn b·∫Øc mi·ªÖn ph√≠ s·ª≠ d·ª•ng AI",
                                "provider": {
                                    "@type": "Organization",
                                    "name": "Soi C·∫ßu AI"
                                },
                                "areaServed": {
                                    "@type": "Country",
                                    "name": "Vietnam"
                                }
                            },
                            "keywords": "soi c·∫ßu mi·ªÅn b·∫Øc, soi cau mien bac, soi c·∫ßu MB, d·ª± ƒëo√°n XSMB, soi c·∫ßu XSMB, soi c·∫ßu mi·ªÖn ph√≠, soi c·∫ßu AI"
                        })
                    }}
                />
            </Head>

            <div className={styles.container}>

                <div className={styles.header}>
                    <h1 className={styles.title}>Soi C·∫ßu Mi·ªÅn B·∫Øc - Soi C·∫ßu MB - D·ª± ƒêo√°n XSMB H√¥m Nay</h1>
                    <p className={styles.subtitle}>
                        Soi c·∫ßu mi·ªÅn b·∫Øc mi·ªÖn ph√≠ ch√≠nh x√°c nh·∫•t v·ªõi AI. D·ª± ƒëo√°n XSMB h√¥m nay, soi c·∫ßu MB, soi c·∫ßu b·∫°ch th·ªß, l√¥ gan. Soi c·∫ßu ch√≠nh x√°c 100%.
                    </p>
                </div>



                {/* Predictions Tab */}
                <div className={styles.predictions}>
                    <div className={styles.predictionsHeader}>
                        <div className={styles.dateSelector}>
                            <label>Ch·ªçn ng√†y:</label>
                            <input
                                type="date"
                                value={selectedDate}
                                onChange={(e) => handleDateChange(e.target.value)}
                                max={formatDate(new Date())}
                            />
                        </div>

                        {/* Type selector - ƒê·ªÄ ho·∫∑c L√î */}
                        <div className={styles.typeSelector}>
                            <label>Lo·∫°i d·ª± ƒëo√°n:</label>
                            <select
                                value={selectedType}
                                onChange={(e) => handleTypeChange(e.target.value)}
                            >
                                <option value="de">üéØ ƒê·ªÅ (2 s·ªë cu·ªëi gi·∫£i ƒë·∫∑c bi·ªát)</option>
                                <option value="lo">üé≤ L√¥ (2 s·ªë cu·ªëi t·∫•t c·∫£ gi·∫£i)</option>
                            </select>
                        </div>

                        {/* Hidden - Always use ensemble for final results */}
                        <div style={{ display: 'none' }}>
                            <label>Ph∆∞∆°ng ph√°p:</label>
                            <select value={FORCED_METHOD} onChange={() => { }}>
                                <option value="ensemble">üéØ Ensemble (T·ªïng h·ª£p AI)</option>
                            </select>
                        </div>

                        <div className={styles.actionButtons}>
                            {!hasDataForSelectedDate && (
                                <button
                                    className={styles.generateButton}
                                    onClick={createDataCollection}
                                    disabled={dataCreationLoading || loading}
                                >
                                    {dataCreationLoading ? 'ƒêang t·∫°o b·ªô d·ªØ li·ªáu...' : 'T·∫°o B·ªô D·ªØ Li·ªáu'}
                                </button>
                            )}
                            <button
                                className={styles.generateButton}
                                onClick={generateSoiCau}
                                disabled={loading || !hasDataForSelectedDate}
                            >
                                {loading ? 'ƒêang t·∫°o soi c·∫ßu...' : 'Soi C·∫ßu'}
                            </button>
                        </div>
                    </div>

                    <div className={styles.predictionsContent}>
                        <div className={styles.predictionsHeader}>
                            <div>
                                <h3>üéØ D·ª± ƒêo√°n XSMB H√¥m Nay - Soi C·∫ßu Mi·ªÅn B·∫Øc - {getTypeDisplayName(selectedType)}</h3>
                                <p>üìÖ Ng√†y: {formatDisplayDate(selectedDate)}</p>
                                <p style={{ color: '#28a745', fontSize: '14px', marginTop: '8px' }}>
                                    ‚ú® Soi c·∫ßu mi·ªÖn ph√≠ v·ªõi AI: T√≠ch h·ª£p CDM, EFDM, CF, Advanced (7 methods), LSTM
                                </p>
                            </div>
                        </div>


                        {/* Predictions will be loaded here */}
                        {currentPredictions && currentPredictions.predictions ? (
                            <>
                                <div className={styles.predictionGrid}>
                                    {memoizedPredictionCards}
                                </div>

                                {/* Extended Features */}
                                {renderExtendedFeatures()}


                            </>
                        ) : hasDataForSelectedDate ? (
                            <div className={styles.noData}>
                                <h3>üìä B·ªô D·ªØ Li·ªáu ƒê√£ S·∫µn S√†ng</h3>
                                <p>B·ªô d·ªØ li·ªáu cho ng√†y {formatDisplayDate(currentProcessingDate)} ƒë√£ c√≥ s·∫µn.</p>
                                <p>Nh·∫•n n√∫t "Soi C·∫ßu" ·ªü tr√™n ƒë·ªÉ xem k·∫øt qu·∫£ d·ª± ƒëo√°n.</p>
                            </div>
                        ) : (
                            <div className={styles.noData}>
                                <h3>Ch∆∞a c√≥ d·ªØ li·ªáu d·ª± ƒëo√°n</h3>
                                <p>Nh·∫•n n√∫t "T·∫°o B·ªô D·ªØ Li·ªáu" ·ªü tr√™n ƒë·ªÉ t·∫°o d·ªØ li·ªáu cho ng√†y {formatDisplayDate(currentProcessingDate)}</p>
                                <p>Sau khi t·∫°o b·ªô d·ªØ li·ªáu, nh·∫•n n√∫t "Soi C·∫ßu" ƒë·ªÉ xem k·∫øt qu·∫£ d·ª± ƒëo√°n.</p>
                            </div>
                        )}
                    </div>
                </div>

                {/* Soi Cau History Components - Always visible */}
                <SoiCauHistoryDe
                    limit={14}
                    days={14}
                />

                {/* SEO Content - Gi·∫£i th√≠ch v·ªÅ soi c·∫ßu mi·ªÅn b·∫Øc */}
                <div className={styles.seoContent} style={{ marginTop: '40px', padding: '20px', backgroundColor: '#f8f9fa', borderRadius: '8px' }}>
                    <h2 style={{ fontSize: '24px', marginBottom: '15px' }}>Soi C·∫ßu Mi·ªÅn B·∫Øc - D·ª± ƒêo√°n XSMB H√¥m Nay Mi·ªÖn Ph√≠</h2>
                    <div style={{ fontSize: '16px', lineHeight: '1.8', color: '#333' }}>
                        <p><strong>Soi c·∫ßu mi·ªÅn b·∫Øc</strong> (soi c·∫ßu MB, soi c·∫ßu XSMB) l√† c√¥ng c·ª• d·ª± ƒëo√°n x·ªï s·ªë mi·ªÅn B·∫Øc mi·ªÖn ph√≠ s·ª≠ d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o (AI). H·ªá th·ªëng soi c·∫ßu AI c·ªßa ch√∫ng t√¥i t√≠ch h·ª£p nhi·ªÅu ph∆∞∆°ng ph√°p ti√™n ti·∫øn:</p>
                        <ul style={{ marginLeft: '20px', marginTop: '10px' }}>
                            <li><strong>Soi c·∫ßu CDM:</strong> Ph∆∞∆°ng ph√°p AI c∆° b·∫£n cho soi c·∫ßu ƒë·ªÅ v√† l√¥</li>
                            <li><strong>Soi c·∫ßu EFDM:</strong> Ph∆∞∆°ng ph√°p m·ªü r·ªông v·ªõi ph√¢n t√≠ch linh ho·∫°t</li>
                            <li><strong>Soi c·∫ßu Collaborative Filtering:</strong> T√¨m ki·∫øm c√°c ng√†y t∆∞∆°ng t·ª± trong l·ªãch s·ª≠</li>
                            <li><strong>Soi c·∫ßu Advanced:</strong> T√≠ch h·ª£p 7 ph∆∞∆°ng ph√°p AI cao c·∫•p</li>
                            <li><strong>Soi c·∫ßu Ensemble:</strong> K·∫øt h·ª£p t·∫•t c·∫£ ph∆∞∆°ng ph√°p ƒë·ªÉ cho k·∫øt qu·∫£ ch√≠nh x√°c nh·∫•t</li>
                        </ul>
                        <p style={{ marginTop: '15px' }}><strong>D·ª± ƒëo√°n XSMB h√¥m nay</strong> bao g·ªìm:</p>
                        <ul style={{ marginLeft: '20px', marginTop: '10px' }}>
                            <li><strong>Soi c·∫ßu ƒë·ªÅ:</strong> D·ª± ƒëo√°n 2 s·ªë cu·ªëi gi·∫£i ƒë·∫∑c bi·ªát XSMB</li>
                            <li><strong>Soi c·∫ßu l√¥:</strong> D·ª± ƒëo√°n 2 s·ªë cu·ªëi t·∫•t c·∫£ c√°c gi·∫£i XSMB</li>
                            <li><strong>Soi c·∫ßu b·∫°ch th·ªß:</strong> D·ª± ƒëo√°n s·ªë c√≥ kh·∫£ nƒÉng cao nh·∫•t</li>
                            <li><strong>L√¥ gan:</strong> Th·ªëng k√™ s·ªë ch∆∞a ra trong nhi·ªÅu ng√†y</li>
                            <li><strong>Th·ªëng k√™ v·ªã tr√≠:</strong> Ph√¢n t√≠ch s·ªë xu·∫•t hi·ªán ·ªü c√°c v·ªã tr√≠ kh√°c nhau</li>
                        </ul>
                        <p style={{ marginTop: '15px' }}>Soi c·∫ßu mi·ªÅn b·∫Øc c·ªßa ch√∫ng t√¥i ho√†n to√†n <strong>mi·ªÖn ph√≠</strong> v√† s·ª≠ d·ª•ng c√¥ng ngh·ªá AI ti√™n ti·∫øn ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªô ch√≠nh x√°c cao nh·∫•t. H√£y th·ª≠ nghi·ªám <strong>soi c·∫ßu MB</strong> ngay h√¥m nay!</p>
                    </div>
                </div>

            </div>
        </Layout>
    );
};

export default SoiCauBayesian;
