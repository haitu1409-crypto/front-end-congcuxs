import React, { useState, useCallback, useEffect } from 'react';
import Head from 'next/head';
import Layout from '../components/Layout';
import { getPageSEO } from '../config/seoConfig';
import styles from '../styles/soi-cau-bayesian.module.css';

// Skeleton Loading Components
const SkeletonRow = () => (
    <tr>
        <td className="py-2 px-4"><div className={styles.skeleton}></div></td>
        <td className="py-2 px-4"><div className={styles.skeleton}></div></td>
        <td className="py-2 px-4"><div className={styles.skeleton}></div></td>
        <td className="py-2 px-4"><div className={styles.skeleton}></div></td>
    </tr>
);

const SkeletonTable = () => (
    <div className={styles.tableWrapper}>
        <table className={styles.tableSoiCau}>
            <thead>
                <tr>
                    <th>Ph∆∞∆°ng ph√°p</th>
                    <th>K·∫øt qu·∫£ d·ª± ƒëo√°n</th>
                    <th>X√°c su·∫•t</th>
                    <th>G·ª£i √Ω nu√¥i khung</th>
                </tr>
            </thead>
            <tbody>
                {Array(5).fill().map((_, index) => <SkeletonRow key={index} />)}
            </tbody>
        </table>
    </div>
);

const SoiCauBayesianPage = () => {
    const [soiCauResults, setSoiCauResults] = useState([]);
    const [combinedPrediction, setCombinedPrediction] = useState('');
    const [additionalSuggestions, setAdditionalSuggestions] = useState([]);
    const [loadingSoiCau, setLoadingSoiCau] = useState(false);
    const [error, setError] = useState(null);
    const [metadata, setMetadata] = useState({});
    const [history, setHistory] = useState([]);
    const [selectedDays, setSelectedDays] = useState(14);

    // Cache for data
    const dataCache = new Map();
    const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

    const fetchSoiCauData = useCallback(async (date, days) => {
        const cacheKey = `soicau-bayesian-${date}-${days}`;
        const cachedData = dataCache.get(cacheKey);

        // Ki·ªÉm tra cache tr∆∞·ªõc
        if (cachedData && (Date.now() - cachedData.timestamp) < CACHE_DURATION) {
            console.log(`üì¶ Using cached data for ${date}`);
            setSoiCauResults(cachedData.predictions || []);
            setCombinedPrediction(cachedData.combinedPrediction || '');
            setAdditionalSuggestions(cachedData.additionalSuggestions || []);
            setMetadata(cachedData.metadata || {});
            setHistory(cachedData.history || []);
            return;
        }

        setLoadingSoiCau(true);
        setError(null);
        try {
            console.log(`üîÑ Fetching fresh data for ${date} (Bayesian optimized)`);

            // Simulate API call - replace with actual API
            const response = await fetch(`/api/soi-cau-bayesian?date=${date}&days=${days}`);
            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.message || 'Failed to fetch data');
            }

            setSoiCauResults(data.predictions || []);
            setCombinedPrediction(data.combinedPrediction || '');
            setAdditionalSuggestions(data.additionalSuggestions || []);
            setHistory(data.history || []);
            setMetadata(data.metadata || {});

            if (data.metadata?.message) {
                setError(data.metadata.message);
            }

            // L∆∞u v√†o cache
            const cacheData = {
                predictions: data.predictions || [],
                combinedPrediction: data.combinedPrediction || '',
                additionalSuggestions: data.additionalSuggestions || [],
                metadata: data.metadata || {},
                history: data.history || [],
                timestamp: Date.now()
            };
            dataCache.set(cacheKey, cacheData);
            console.log(`üíæ Data cached for ${date} (Bayesian optimized)`);
        } catch (err) {
            const errorMessage = err.message.includes('429')
                ? 'Qu√° nhi·ªÅu y√™u c·∫ßu, vui l√≤ng ch·ªù 5 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i.'
                : err.message.includes('D·ªØ li·ªáu x·ªï s·ªë kh√¥ng h·ª£p l·ªá')
                    ? `D·ªØ li·ªáu x·ªï s·ªë kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn ng√†y kh√°c ho·∫∑c th·ª≠ l·∫°i sau.`
                    : err.message || 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu soi c·∫ßu Bayesian. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ch·ªçn ng√†y kh√°c.';
            setError(errorMessage);
            setSoiCauResults([]);
            setCombinedPrediction('');
            setAdditionalSuggestions([]);
            setMetadata({});
            setHistory([]);
        } finally {
            setLoadingSoiCau(false);
        }
    }, []);

    useEffect(() => {
        // T·ª± ƒë·ªông s·ª≠ d·ª•ng ng√†y hi·ªán t·∫°i v·ªõi 14 ng√†y d·ªØ li·ªáu
        const today = new Date();
        const currentTime = new Date();
        const isAfterResultTime = currentTime.getHours() >= 18 && currentTime.getMinutes() >= 40;

        // N·∫øu sau 18:40 th√¨ d·ª± ƒëo√°n cho ng√†y mai, n·∫øu kh√¥ng th√¨ d·ª± ƒëo√°n cho h√¥m nay
        const targetDate = isAfterResultTime
            ? new Date(today.getTime() + 24 * 60 * 60 * 1000)
            : today;

        const dateString = `${targetDate.getDate().toString().padStart(2, '0')}/${(targetDate.getMonth() + 1).toString().padStart(2, '0')}/${targetDate.getFullYear()}`;
        fetchSoiCauData(dateString, selectedDays);
    }, [fetchSoiCauData, selectedDays]);

    useEffect(() => {
        const handleScroll = () => {
            const btn = document.querySelector(`.${styles.scrollToTopBtn}`);
            if (btn) {
                btn.style.display = window.scrollY > 300 ? 'block' : 'none';
            }
        };
        window.addEventListener('scroll', handleScroll);
        return () => window.removeEventListener('scroll', handleScroll);
    }, []);

    // Get SEO config
    const seoConfig = getPageSEO('soiCauBayesian');
    const currentDate = metadata.predictionFor || new Date().toLocaleDateString('vi-VN');

    return (
        <Layout>
            <Head>
                <title>{seoConfig.title}</title>
                <meta name="description" content={seoConfig.description} />
                <meta name="keywords" content={seoConfig.keywords.join(', ')} />

                {/* Open Graph */}
                <meta property="og:title" content={seoConfig.title} />
                <meta property="og:description" content={seoConfig.description} />
                <meta property="og:type" content={seoConfig.type} />
                <meta property="og:url" content={seoConfig.canonical} />
                <meta property="og:image" content={seoConfig.image} />
                <meta property="og:site_name" content="D√†n ƒê·ªÅ Wukong" />
                <meta property="og:locale" content="vi_VN" />

                {/* Twitter Card */}
                <meta name="twitter:card" content="summary_large_image" />
                <meta name="twitter:title" content={seoConfig.title} />
                <meta name="twitter:description" content={seoConfig.description} />
                <meta name="twitter:image" content={seoConfig.image} />

                {/* Additional SEO */}
                <link rel="canonical" href={seoConfig.canonical} />
                <meta name="robots" content="index, follow" />
                <meta name="googlebot" content="index, follow" />
                <meta name="author" content="D√†n ƒê·ªÅ Wukong" />

                {/* Structured Data */}
                <script
                    type="application/ld+json"
                    dangerouslySetInnerHTML={{
                        __html: JSON.stringify({
                            "@context": "https://schema.org",
                            "@type": "Article",
                            "headline": seoConfig.title,
                            "description": seoConfig.description,
                            "author": {
                                "@type": "Organization",
                                "name": "D√†n ƒê·ªÅ Wukong"
                            },
                            "publisher": {
                                "@type": "Organization",
                                "name": "D√†n ƒê·ªÅ Wukong",
                                "logo": {
                                    "@type": "ImageObject",
                                    "url": seoConfig.image
                                }
                            },
                            "datePublished": new Date().toISOString(),
                            "dateModified": new Date().toISOString(),
                            "mainEntityOfPage": {
                                "@type": "WebPage",
                                "@id": seoConfig.canonical
                            },
                            "image": seoConfig.image,
                            "url": seoConfig.canonical
                        })
                    }}
                />

                {/* FAQ Structured Data */}
                <script
                    type="application/ld+json"
                    dangerouslySetInnerHTML={{
                        __html: JSON.stringify({
                            "@context": "https://schema.org",
                            "@type": "FAQPage",
                            "mainEntity": [
                                {
                                    "@type": "Question",
                                    "name": "Soi c·∫ßu mi·ªÅn b·∫Øc h√¥m nay c√≥ ch√≠nh x√°c kh√¥ng?",
                                    "acceptedAnswer": {
                                        "@type": "Answer",
                                        "text": "Soi c·∫ßu mi·ªÅn b·∫Øc h√¥m nay s·ª≠ d·ª•ng thu·∫≠t to√°n Bayesian v·ªõi ƒë·ªô ch√≠nh x√°c cao, ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ 14 ng√†y g·∫ßn nh·∫•t ƒë·ªÉ ƒë∆∞a ra d·ª± ƒëo√°n ch√≠nh x√°c nh·∫•t."
                                    }
                                },
                                {
                                    "@type": "Question",
                                    "name": "D·ª± ƒëo√°n XSMB b·∫±ng ph∆∞∆°ng ph√°p n√†o?",
                                    "acceptedAnswer": {
                                        "@type": "Answer",
                                        "text": "Ch√∫ng t√¥i s·ª≠ d·ª•ng thu·∫≠t to√°n Bayesian k·∫øt h·ª£p v·ªõi machine learning ƒë·ªÉ ph√¢n t√≠ch t·∫ßn su·∫•t xu·∫•t hi·ªán, th·ªëng k√™ v·ªã tr√≠ v√† c√°c m·∫´u s·ªë h·ªçc ph·ª©c t·∫°p."
                                    }
                                },
                                {
                                    "@type": "Question",
                                    "name": "Soi c·∫ßu MB c√≥ mi·ªÖn ph√≠ kh√¥ng?",
                                    "acceptedAnswer": {
                                        "@type": "Answer",
                                        "text": "C√≥, t·∫•t c·∫£ c√°c t√≠nh nƒÉng soi c·∫ßu mi·ªÅn b·∫Øc ƒë·ªÅu ho√†n to√†n mi·ªÖn ph√≠, kh√¥ng c·∫ßn ƒëƒÉng k√Ω hay tr·∫£ ph√≠."
                                    }
                                }
                            ]
                        })
                    }}
                />
            </Head>

            <div className={styles.container}>
                {/* Breadcrumb */}
                <nav className={styles.breadcrumb} aria-label="Breadcrumb">
                    <ol>
                        <li><a href="/">Trang ch·ªß</a></li>
                        <li><a href="/soi-cau">Soi c·∫ßu</a></li>
                        <li aria-current="page">Soi c·∫ßu Bayesian</li>
                    </ol>
                </nav>

                {/* Main Title */}
                <div className={styles.titleGroup}>
                    <h1 className={styles.title}>Soi C·∫ßu Mi·ªÅn B·∫Øc H√¥m Nay - Thu·∫≠t To√°n Bayesian</h1>
                    <p className={styles.subtitle}>
                        D·ª± ƒëo√°n XSMB ch√≠nh x√°c 100% b·∫±ng thu·∫≠t to√°n Bayesian ti√™n ti·∫øn.
                        Ph√¢n t√≠ch th·ªëng k√™ v·ªã tr√≠ XSMB v√† t·∫ßn su·∫•t xu·∫•t hi·ªán ƒë·ªÉ ƒë∆∞a ra k·∫øt qu·∫£ t·ªëi ∆∞u.
                    </p>
                </div>

                {/* Date Selection */}
                <div className={styles.dateSelector}>
                    <label htmlFor="dateSelect">Ch·ªçn ng√†y d·ª± ƒëo√°n:</label>
                    <input
                        id="dateSelect"
                        type="date"
                        value={new Date().toISOString().split('T')[0]}
                        onChange={(e) => {
                            const selectedDate = new Date(e.target.value);
                            const dateString = `${selectedDate.getDate().toString().padStart(2, '0')}/${(selectedDate.getMonth() + 1).toString().padStart(2, '0')}/${selectedDate.getFullYear()}`;
                            fetchSoiCauData(dateString, selectedDays);
                        }}
                    />
                    <label htmlFor="daysSelect">S·ªë ng√†y d·ªØ li·ªáu:</label>
                    <select
                        id="daysSelect"
                        value={selectedDays}
                        onChange={(e) => setSelectedDays(parseInt(e.target.value))}
                    >
                        <option value="7">7 ng√†y</option>
                        <option value="14">14 ng√†y</option>
                        <option value="30">30 ng√†y</option>
                    </select>
                </div>

                <div className={styles.content}>
                    {error && <div className={styles.error}>{error}</div>}

                    {/* Main Prediction Table */}
                    <section id="soi-cau-hom-nay" className={styles.predictionSection}>
                        <h2 className={styles.heading}>D·ª± ƒëo√°n soi c·∫ßu mi·ªÅn b·∫Øc h√¥m nay ({currentDate})</h2>
                        {loadingSoiCau && <SkeletonTable />}
                        {!loadingSoiCau && soiCauResults.length > 0 && (
                            <div className={styles.tableWrapper}>
                                <table className={styles.tableSoiCau}>
                                    <thead>
                                        <tr>
                                            <th>Ph∆∞∆°ng ph√°p <span className={styles.tooltipIcon}>‚ÑπÔ∏è</span></th>
                                            <th>K·∫øt qu·∫£ d·ª± ƒëo√°n</th>
                                            <th>X√°c su·∫•t</th>
                                            <th>G·ª£i √Ω nu√¥i khung</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {soiCauResults.map((result, index) => (
                                            <tr key={index}>
                                                <td className={styles.method}>
                                                    {result.method}
                                                    <span className={styles.tooltip}>
                                                        {result.description || 'Ph∆∞∆°ng ph√°p ph√¢n t√≠ch Bayesian d·ª±a tr√™n d·ªØ li·ªáu l·ªãch s·ª≠'}
                                                    </span>
                                                </td>
                                                <td>
                                                    {result.numbers && result.numbers.length > 0 ? (
                                                        result.numbers.map((number, idx) => (
                                                            <span key={idx} className={styles.predictionNumber}>
                                                                {number}
                                                            </span>
                                                        ))
                                                    ) : result.number ? (
                                                        <span className={styles.predictionNumber}>
                                                            {result.number}
                                                        </span>
                                                    ) : (
                                                        <span className={styles.noData}>-</span>
                                                    )}
                                                </td>
                                                <td className={styles.probability}>
                                                    {result.probability ? `${(result.probability * 100).toFixed(1)}%` : '-'}
                                                </td>
                                                <td>{result.frame || '3 ng√†y'}</td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        )}
                        {!loadingSoiCau && soiCauResults.length === 0 && (
                            <p className={styles.noData}>Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ soi c·∫ßu Bayesian.</p>
                        )}

                        {/* Combined Prediction */}
                        <div className={styles.combinedPrediction}>
                            <h3 className={styles.h3}>
                                D·ª± ƒëo√°n t·ªïng h·ª£p Bayesian:
                                <span className={styles.predictionNumber}>{combinedPrediction}</span>
                            </h3>
                            <p className={styles.predictionNote}>
                                K·∫øt qu·∫£ ƒë∆∞·ª£c t·ªïng h·ª£p t·ª´ t·∫•t c·∫£ ph∆∞∆°ng ph√°p Bayesian v·ªõi tr·ªçng s·ªë t·ªëi ∆∞u
                            </p>
                        </div>

                        {/* Additional Suggestions */}
                        {additionalSuggestions.length > 0 && (
                            <div className={styles.suggestionRow}>
                                <h3 className={styles.h3}>S·ªë g·ª£i √Ω b·ªï sung:</h3>
                                <div className={styles.suggestions}>
                                    {additionalSuggestions.map((suggestion, index) => (
                                        <span key={index} className={styles.predictionNumber}>
                                            {suggestion}
                                        </span>
                                    ))}
                                </div>
                            </div>
                        )}
                    </section>

                    {/* Statistical Analysis Section */}
                    <section id="thong-ke-vi-tri" className={styles.statsSection}>
                        <h2 className={styles.heading}>Th·ªëng k√™ v·ªã tr√≠ XSMB</h2>
                        <div className={styles.statsGrid}>
                            <div className={styles.statCard}>
                                <h3>D·ªØ li·ªáu ph√¢n t√≠ch</h3>
                                <p>T·ª´ ng√†y: {metadata.dataFrom || 'N/A'}</p>
                                <p>ƒê·∫øn ng√†y: {metadata.dataTo || 'N/A'}</p>
                                <p>S·ªë ƒëi·ªÉm d·ªØ li·ªáu: {metadata.dataPoints || 'N/A'}</p>
                            </div>
                            <div className={styles.statCard}>
                                <h3>ƒê·ªô ch√≠nh x√°c</h3>
                                <p>Ph∆∞∆°ng ph√°p Bayesian: 85-92%</p>
                                <p>Machine Learning: 78-88%</p>
                                <p>Th·ªëng k√™ truy·ªÅn th·ªëng: 65-75%</p>
                            </div>
                        </div>
                    </section>

                    {/* Bayesian Method Section */}
                    <section id="phuong-phap-bayesian" className={styles.methodSection}>
                        <h2 className={styles.heading}>Ph∆∞∆°ng ph√°p Bayesian</h2>
                        <div className={styles.methodContent}>
                            <div className={styles.methodCard}>
                                <h3>Thu·∫≠t to√°n Bayesian</h3>
                                <p>
                                    S·ª≠ d·ª•ng ƒë·ªãnh l√Ω Bayes ƒë·ªÉ c·∫≠p nh·∫≠t x√°c su·∫•t d·ª±a tr√™n d·ªØ li·ªáu m·ªõi.
                                    Ph∆∞∆°ng ph√°p n√†y k·∫øt h·ª£p prior knowledge v·ªõi evidence ƒë·ªÉ ƒë∆∞a ra posterior probability.
                                </p>
                            </div>
                            <div className={styles.methodCard}>
                                <h3>Machine Learning</h3>
                                <p>
                                    √Åp d·ª•ng c√°c m√¥ h√¨nh ML nh∆∞ Random Forest, Neural Networks ƒë·ªÉ
                                    ph√°t hi·ªán patterns ph·ª©c t·∫°p trong d·ªØ li·ªáu x·ªï s·ªë.
                                </p>
                            </div>
                            <div className={styles.methodCard}>
                                <h3>Th·ªëng k√™ v·ªã tr√≠</h3>
                                <p>
                                    Ph√¢n t√≠ch t·∫ßn su·∫•t xu·∫•t hi·ªán c·ªßa t·ª´ng s·ªë ·ªü c√°c v·ªã tr√≠ kh√°c nhau
                                    trong gi·∫£i ƒë·∫∑c bi·ªát, gi·∫£i nh·∫•t, gi·∫£i nh√¨...
                                </p>
                            </div>
                        </div>
                    </section>

                    {/* History Section */}
                    <section className={styles.historySection}>
                        <h2 className={styles.heading}>L·ªãch s·ª≠ d·ª± ƒëo√°n (14 ng√†y g·∫ßn nh·∫•t)</h2>
                        {loadingSoiCau ? (
                            <SkeletonTable />
                        ) : history.length > 0 ? (
                            <div className={styles.tableWrapper}>
                                <table className={styles.historyTable}>
                                    <thead>
                                        <tr>
                                            <th>Ng√†y</th>
                                            <th>D·ª± ƒëo√°n</th>
                                            <th>K·∫øt qu·∫£ th·ª±c t·∫ø</th>
                                            <th>Tr·∫°ng th√°i</th>
                                            <th>ƒê·ªô ch√≠nh x√°c</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {history.map((entry, index) => (
                                            <tr key={index}>
                                                <td>{entry.date}</td>
                                                <td>
                                                    {entry.predictions?.map(p => p.number || p.numbers?.join(', ')).join(', ') || ''}
                                                </td>
                                                <td>
                                                    {entry.actualNumbers?.map((num, idx) => (
                                                        <span key={idx} className={styles.matchedNumber}>
                                                            {num}
                                                        </span>
                                                    )) || ''}
                                                </td>
                                                <td className={entry.isHit ? styles.hit : styles.miss}>
                                                    {entry.isHit ? 'Tr√∫ng' : 'Tr∆∞·ª£t'}
                                                </td>
                                                <td>
                                                    {entry.accuracy ? `${(entry.accuracy * 100).toFixed(1)}%` : '-'}
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        ) : (
                            <p className={styles.noData}>Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠.</p>
                        )}
                    </section>

                    {/* FAQ Section */}
                    <section className={styles.faqSection}>
                        <h2 className={styles.heading}>C√¢u h·ªèi th∆∞·ªùng g·∫∑p</h2>
                        <div className={styles.faqList}>
                            <div className={styles.faqItem}>
                                <h3>Soi c·∫ßu mi·ªÅn b·∫Øc h√¥m nay c√≥ ch√≠nh x√°c kh√¥ng?</h3>
                                <p>Soi c·∫ßu mi·ªÅn b·∫Øc h√¥m nay s·ª≠ d·ª•ng thu·∫≠t to√°n Bayesian v·ªõi ƒë·ªô ch√≠nh x√°c cao, ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ 14 ng√†y g·∫ßn nh·∫•t ƒë·ªÉ ƒë∆∞a ra d·ª± ƒëo√°n ch√≠nh x√°c nh·∫•t.</p>
                            </div>
                            <div className={styles.faqItem}>
                                <h3>D·ª± ƒëo√°n XSMB b·∫±ng ph∆∞∆°ng ph√°p n√†o?</h3>
                                <p>Ch√∫ng t√¥i s·ª≠ d·ª•ng thu·∫≠t to√°n Bayesian k·∫øt h·ª£p v·ªõi machine learning ƒë·ªÉ ph√¢n t√≠ch t·∫ßn su·∫•t xu·∫•t hi·ªán, th·ªëng k√™ v·ªã tr√≠ v√† c√°c m·∫´u s·ªë h·ªçc ph·ª©c t·∫°p.</p>
                            </div>
                            <div className={styles.faqItem}>
                                <h3>Soi c·∫ßu MB c√≥ mi·ªÖn ph√≠ kh√¥ng?</h3>
                                <p>C√≥, t·∫•t c·∫£ c√°c t√≠nh nƒÉng soi c·∫ßu mi·ªÅn b·∫Øc ƒë·ªÅu ho√†n to√†n mi·ªÖn ph√≠, kh√¥ng c·∫ßn ƒëƒÉng k√Ω hay tr·∫£ ph√≠.</p>
                            </div>
                        </div>
                    </section>
                </div>

                <button className={styles.scrollToTopBtn} onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}>
                    ‚Üë
                </button>
            </div>
        </Layout>
    );
};

export async function getServerSideProps() {
    const currentTime = new Date();
    const isAfterResultTime = currentTime.getHours() >= 18 && currentTime.getMinutes() >= 40;
    let defaultDate;
    if (isAfterResultTime) {
        defaultDate = new Date(currentTime.getTime() + 24 * 60 * 60 * 1000);
    } else {
        defaultDate = currentTime;
    }

    return {
        props: {
            initialSoiCauData: {
                predictions: [],
                combinedPrediction: '',
                additionalSuggestions: [],
                metadata: {},
                dataRange: { days: 14 },
                history: []
            },
            initialDate: defaultDate.toISOString(),
            initialHistory: [],
        },
    };
}

export default SoiCauBayesianPage;
