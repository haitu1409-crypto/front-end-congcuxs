/**
 * Optimized Position Soi Cau Page
 * Trang soi c·∫ßu v·ªã tr√≠ t·ªëi ∆∞u h√≥a v·ªõi SSR, caching v√† performance monitoring
 */

import React from 'react';
import Head from 'next/head';
import dynamic from 'next/dynamic';
import Layout from '../components/Layout';
import optimizedApiService from '../services/optimizedApiService';

// Lazy load component ƒë·ªÉ t·ªëi ∆∞u h√≥a bundle
const OptimizedPositionSoiCau = dynamic(() => import('../components/OptimizedPositionSoiCau'), {
    loading: () => (
        <div style={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            height: '400px',
            fontSize: '18px',
            color: '#666'
        }}>
            ƒêang t·∫£i...
        </div>
    ),
    ssr: false
});

const OptimizedPositionSoiCauPage = ({ initialData, initialDate, initialDays, performance }) => {
    const pageTitle = 'Soi C·∫ßu V·ªã Tr√≠ T·ªëi ∆Øu - D·ª± ƒêo√°n D·ª±a Tr√™n V·ªã Tr√≠ S·ªë';
    const pageDescription = 'Thu·∫≠t to√°n soi c·∫ßu ti√™n ti·∫øn ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a v·ªõi caching th√¥ng minh, ph√¢n t√≠ch v·ªã tr√≠ s·ªë trong k·∫øt qu·∫£ x·ªï s·ªë. T√¨m ki·∫øm pattern nh·∫•t qu√°n ƒë·ªÉ d·ª± ƒëo√°n 2 s·ªë cu·ªëi gi·∫£i ƒë·∫∑c bi·ªát v·ªõi hi·ªáu su·∫•t cao.';

    return (
        <Layout>
            <Head>
                <title>{pageTitle}</title>
                <meta name="description" content={pageDescription} />
                <meta property="og:title" content={pageTitle} />
                <meta property="og:description" content={pageDescription} />
                <meta property="og:type" content="website" />
                <meta property="og:url" content="https://yourdomain.com/optimized-soi-cau-vi-tri" />
                <meta property="og:image" content="https://yourdomain.com/images/optimized-soi-cau-vi-tri.jpg" />
                <link rel="canonical" href="https://yourdomain.com/optimized-soi-cau-vi-tri" />

                {/* SEO Keywords */}
                <meta name="keywords" content="soi c·∫ßu v·ªã tr√≠ t·ªëi ∆∞u, soi c·∫ßu b·∫°ch th·ªß, d·ª± ƒëo√°n x·ªï s·ªë, ph√¢n t√≠ch v·ªã tr√≠ s·ªë, pattern x·ªï s·ªë, thu·∫≠t to√°n soi c·∫ßu, caching th√¥ng minh, hi·ªáu su·∫•t cao" />

                {/* Performance Keywords */}
                <meta name="performance" content="optimized, cached, fast, efficient" />
                <meta name="optimization" content="advanced caching, debouncing, lazy loading, memoization" />

                {/* Additional SEO */}
                <meta name="robots" content="index, follow" />
                <meta name="author" content="D√†n ƒê·ªÅ Wukong" />
                <meta name="viewport" content="width=device-width, initial-scale=1.0" />

                {/* Performance hints */}
                <link rel="preload" href="/api/optimized-position-soicau" as="fetch" crossOrigin="anonymous" />
                <link rel="dns-prefetch" href="//api.yourdomain.com" />
            </Head>

            {/* Performance monitoring script */}
            <script
                dangerouslySetInnerHTML={{
                    __html: `
                        // Performance monitoring
                        window.addEventListener('load', function() {
                            if (typeof performance !== 'undefined' && performance.timing) {
                                const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
                                console.log('Page load time:', loadTime + 'ms');
                                
                                // Send performance data to analytics
                                if (typeof gtag !== 'undefined') {
                                    gtag('event', 'page_load_time', {
                                        'custom_parameter_1': loadTime,
                                        'page_title': '${pageTitle}'
                                    });
                                }
                            }
                        });
                    `
                }}
            />

            <OptimizedPositionSoiCau
                initialData={initialData}
                initialDate={initialDate}
                initialDays={initialDays}
                performance={performance}
            />

            {/* Performance metrics display (development only) */}
            {process.env.NODE_ENV === 'development' && performance && (
                <div style={{
                    position: 'fixed',
                    bottom: '10px',
                    right: '10px',
                    background: 'rgba(0,0,0,0.8)',
                    color: 'white',
                    padding: '10px',
                    borderRadius: '5px',
                    fontSize: '12px',
                    zIndex: 1000
                }}>
                    <div>Response Time: {performance.responseTime}ms</div>
                    <div>Cache Hit: {performance.cacheHit ? 'Yes' : 'No'}</div>
                    <div>Optimized: {performance.optimized ? 'Yes' : 'No'}</div>
                </div>
            )}
        </Layout>
    );
};

export async function getServerSideProps(context) {
    const startTime = Date.now();

    try {
        const currentTime = new Date();
        const isAfterResultTime = currentTime.getHours() >= 18 && currentTime.getMinutes() >= 40;
        let defaultDate;

        if (isAfterResultTime) {
            defaultDate = new Date(currentTime.getTime() + 24 * 60 * 60 * 1000);
        } else {
            defaultDate = currentTime;
        }

        const defaultDays = 2;
        const formattedDate = defaultDate.toLocaleDateString('vi-VN').replace(/\//g, '/');

        // Fallback data ƒë·ªÉ tr√°nh l·ªói API
        const fallbackData = {
            analysisDate: formattedDate,
            analysisDays: defaultDays,
            totalResults: 3,
            patternsFound: 15,
            consistentPatterns: 8,
            metadata: {
                successRate: 75,
                optimized: true
            },
            predictions: [
                { predictedNumber: "08", position1: "(6-1-1)", position2: "(7-3-1)", confidence: 50 },
                { predictedNumber: "11", position1: "(2-0-0)", position2: "(4-1-0)", confidence: 50 },
                { predictedNumber: "12", position1: "(2-0-0)", position2: "(2-1-0)", confidence: 50 },
                { predictedNumber: "13", position1: "(2-0-0)", position2: "(5-2-3)", confidence: 50 },
                { predictedNumber: "15", position1: "(2-0-0)", position2: "(3-2-1)", confidence: 50 },
                { predictedNumber: "17", position1: "(2-0-0)", position2: "(3-5-2)", confidence: 50 },
                { predictedNumber: "18", position1: "(2-0-0)", position2: "(7-3-1)", confidence: 50 },
                { predictedNumber: "19", position1: "(2-0-0)", position2: "(6-0-1)", confidence: 50 },
                { predictedNumber: "21", position1: "(3-4-2)", position2: "(4-1-0)", confidence: 50 },
                { predictedNumber: "22", position1: "(3-4-2)", position2: "(4-0-0)", confidence: 50 },
                { predictedNumber: "23", position1: "(3-4-2)", position2: "(5-2-3)", confidence: 50 },
                { predictedNumber: "25", position1: "(3-4-2)", position2: "(5-4-0)", confidence: 50 },
                { predictedNumber: "27", position1: "(3-4-2)", position2: "(3-5-2)", confidence: 50 },
                { predictedNumber: "28", position1: "(3-4-2)", position2: "(7-3-1)", confidence: 50 },
                { predictedNumber: "29", position1: "(3-4-2)", position2: "(6-0-1)", confidence: 50 }
            ],
            tableStatistics: {
                "ƒê·∫ßu 0": [{ number: 8, count: 3 }],
                "ƒê·∫ßu 1": [{ number: 11, count: 2 }, { number: 12, count: 1 }],
                "ƒê·∫ßu 2": [{ number: 21, count: 2 }, { number: 22, count: 1 }],
                "ƒê·∫ßu 3": [],
                "ƒê·∫ßu 4": [],
                "ƒê·∫ßu 5": [],
                "ƒê·∫ßu 6": [],
                "ƒê·∫ßu 7": [],
                "ƒê·∫ßu 8": [],
                "ƒê·∫ßu 9": []
            }
        };

        let positionData = fallbackData;
        let performance = {
            responseTime: 0,
            cacheHit: false,
            optimized: true,
            timestamp: new Date().toISOString()
        };

        try {
            // Th·ª≠ g·ªçi optimized API
            const apiResponse = await optimizedApiService.getOptimizedPositionSoiCau({
                date: formattedDate,
                days: defaultDays
            });

            if (apiResponse.success) {
                positionData = apiResponse.data;
                performance = {
                    responseTime: apiResponse.data.performance?.responseTime || 0,
                    cacheHit: apiResponse.data.performance?.cacheHit || false,
                    optimized: true,
                    timestamp: new Date().toISOString()
                };
            }
        } catch (apiError) {
            console.warn('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ optimized API, s·ª≠ d·ª•ng fallback:', apiError.message);
        }

        const serverResponseTime = Date.now() - startTime;
        console.log(`üöÄ Optimized SSR completed in ${serverResponseTime}ms`);

        return {
            props: {
                initialData: positionData,
                initialDate: defaultDate.toISOString(),
                initialDays: defaultDays,
                performance: {
                    ...performance,
                    serverResponseTime
                }
            },
        };
    } catch (error) {
        console.error('‚ùå Error in optimized getServerSideProps:', error.message);

        return {
            props: {
                initialData: {},
                initialDate: new Date().toISOString(),
                initialDays: 2,
                performance: {
                    responseTime: 0,
                    cacheHit: false,
                    optimized: false,
                    error: error.message,
                    timestamp: new Date().toISOString()
                }
            },
        };
    }
}

export default OptimizedPositionSoiCauPage;
